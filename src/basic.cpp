// Generated by dust (version 0.5.3) - do not edit
#include <iostream>
#include <dust/dust.hpp>
#include <dust/interface.hpp>

// Generated by odin.dust (version 0.1.0) - do not edit
template <typename T>
T odin_sum1(const T * x, size_t from, size_t to);
template <typename real_t>
real_t odin_sum2(const real_t * x, int from_i, int to_i, int from_j, int to_j, int dim_x_1);
template <typename real_t>
real_t odin_sum3(const real_t * x, int from_i, int to_i, int from_j, int to_j, int from_k, int to_k, int dim_x_1, int dim_x_12);
// [[dust::class(basic)]]
// [[dust::param(beta_step, has_default = FALSE, default_value = NULL, rank = 1, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(dt, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(hosp_transmission, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(ICU_transmission, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(m, has_default = FALSE, default_value = NULL, rank = 2, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(n_age_groups, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(p_asympt, has_default = FALSE, default_value = NULL, rank = 1, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(p_death_hosp, has_default = FALSE, default_value = NULL, rank = 1, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(p_recov_hosp, has_default = FALSE, default_value = NULL, rank = 1, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(p_recov_ICU, has_default = FALSE, default_value = NULL, rank = 1, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(p_recov_ILI, has_default = FALSE, default_value = NULL, rank = 1, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(p_sympt_ILI, has_default = FALSE, default_value = NULL, rank = 1, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(s_asympt, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(s_E, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(s_hosp, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(s_ICU, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(s_ILI, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(s_mild, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(s_rec, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(gamma_asympt, has_default = TRUE, default_value = 0.1, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(gamma_E, has_default = TRUE, default_value = 0.1, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(gamma_hosp, has_default = TRUE, default_value = 0.1, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(gamma_ICU, has_default = TRUE, default_value = 0.1, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(gamma_ILI, has_default = TRUE, default_value = 0.1, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(gamma_mild, has_default = TRUE, default_value = 0.1, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(gamma_rec, has_default = TRUE, default_value = 0.1, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(n_trans_classes, has_default = TRUE, default_value = 1L, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
class basic {
public:
  typedef double real_t;
  struct init_t {
    std::vector<real_t> aux_EE;
    std::vector<real_t> aux_II_asympt;
    std::vector<real_t> aux_II_hosp;
    std::vector<real_t> aux_II_ICU;
    std::vector<real_t> aux_II_ILI;
    std::vector<real_t> aux_II_mild;
    std::vector<real_t> aux_p_bin;
    std::vector<real_t> aux_R_hosp;
    std::vector<real_t> beta_step;
    std::vector<real_t> delta_D;
    std::vector<real_t> delta_E;
    std::vector<real_t> delta_I_asympt;
    std::vector<real_t> delta_I_hosp;
    std::vector<real_t> delta_I_ICU;
    std::vector<real_t> delta_I_ILI;
    std::vector<real_t> delta_I_mild;
    std::vector<real_t> delta_R;
    std::vector<real_t> delta_R_hosp;
    int dim_aux_EE;
    int dim_aux_EE_1;
    int dim_aux_EE_12;
    int dim_aux_EE_2;
    int dim_aux_EE_3;
    int dim_aux_II_asympt;
    int dim_aux_II_asympt_1;
    int dim_aux_II_asympt_12;
    int dim_aux_II_asympt_2;
    int dim_aux_II_asympt_3;
    int dim_aux_II_hosp;
    int dim_aux_II_hosp_1;
    int dim_aux_II_hosp_12;
    int dim_aux_II_hosp_2;
    int dim_aux_II_hosp_3;
    int dim_aux_II_ICU;
    int dim_aux_II_ICU_1;
    int dim_aux_II_ICU_12;
    int dim_aux_II_ICU_2;
    int dim_aux_II_ICU_3;
    int dim_aux_II_ILI;
    int dim_aux_II_ILI_1;
    int dim_aux_II_ILI_12;
    int dim_aux_II_ILI_2;
    int dim_aux_II_ILI_3;
    int dim_aux_II_mild;
    int dim_aux_II_mild_1;
    int dim_aux_II_mild_12;
    int dim_aux_II_mild_2;
    int dim_aux_II_mild_3;
    int dim_aux_p_bin;
    int dim_aux_p_bin_1;
    int dim_aux_p_bin_2;
    int dim_aux_R_hosp;
    int dim_aux_R_hosp_1;
    int dim_aux_R_hosp_12;
    int dim_aux_R_hosp_2;
    int dim_aux_R_hosp_3;
    int dim_beta_step;
    int dim_D;
    int dim_delta_D;
    int dim_delta_E;
    int dim_delta_E_1;
    int dim_delta_E_12;
    int dim_delta_E_2;
    int dim_delta_E_3;
    int dim_delta_I_asympt;
    int dim_delta_I_asympt_1;
    int dim_delta_I_asympt_12;
    int dim_delta_I_asympt_2;
    int dim_delta_I_asympt_3;
    int dim_delta_I_hosp;
    int dim_delta_I_hosp_1;
    int dim_delta_I_hosp_12;
    int dim_delta_I_hosp_2;
    int dim_delta_I_hosp_3;
    int dim_delta_I_ICU;
    int dim_delta_I_ICU_1;
    int dim_delta_I_ICU_12;
    int dim_delta_I_ICU_2;
    int dim_delta_I_ICU_3;
    int dim_delta_I_ILI;
    int dim_delta_I_ILI_1;
    int dim_delta_I_ILI_12;
    int dim_delta_I_ILI_2;
    int dim_delta_I_ILI_3;
    int dim_delta_I_mild;
    int dim_delta_I_mild_1;
    int dim_delta_I_mild_12;
    int dim_delta_I_mild_2;
    int dim_delta_I_mild_3;
    int dim_delta_R;
    int dim_delta_R_hosp;
    int dim_delta_R_hosp_1;
    int dim_delta_R_hosp_12;
    int dim_delta_R_hosp_2;
    int dim_delta_R_hosp_3;
    int dim_E;
    int dim_E_1;
    int dim_E_12;
    int dim_E_2;
    int dim_E_3;
    int dim_I_asympt;
    int dim_I_asympt_1;
    int dim_I_asympt_12;
    int dim_I_asympt_2;
    int dim_I_asympt_3;
    int dim_I_hosp;
    int dim_I_hosp_1;
    int dim_I_hosp_12;
    int dim_I_hosp_2;
    int dim_I_hosp_3;
    int dim_I_ICU;
    int dim_I_ICU_1;
    int dim_I_ICU_12;
    int dim_I_ICU_2;
    int dim_I_ICU_3;
    int dim_I_ILI;
    int dim_I_ILI_1;
    int dim_I_ILI_12;
    int dim_I_ILI_2;
    int dim_I_ILI_3;
    int dim_I_mild;
    int dim_I_mild_1;
    int dim_I_mild_12;
    int dim_I_mild_2;
    int dim_I_mild_3;
    int dim_I_with_diff_trans;
    int dim_I_with_diff_trans_1;
    int dim_I_with_diff_trans_2;
    int dim_lambda;
    int dim_m;
    int dim_m_1;
    int dim_m_2;
    int dim_n_death_hosp;
    int dim_n_death_hosp_1;
    int dim_n_death_hosp_2;
    int dim_n_EE;
    int dim_n_EE_1;
    int dim_n_EE_12;
    int dim_n_EE_2;
    int dim_n_EE_3;
    int dim_n_EI_asympt;
    int dim_n_EI_asympt_1;
    int dim_n_EI_asympt_2;
    int dim_n_EI_ILI;
    int dim_n_EI_ILI_1;
    int dim_n_EI_ILI_2;
    int dim_n_EI_mild;
    int dim_n_EI_mild_1;
    int dim_n_EI_mild_2;
    int dim_n_hosp_to_ICU;
    int dim_n_hosp_to_ICU_1;
    int dim_n_hosp_to_ICU_2;
    int dim_n_ICU_to_R_hosp;
    int dim_n_ICU_to_R_hosp_1;
    int dim_n_ICU_to_R_hosp_2;
    int dim_n_II_asympt;
    int dim_n_II_asympt_1;
    int dim_n_II_asympt_12;
    int dim_n_II_asympt_2;
    int dim_n_II_asympt_3;
    int dim_n_II_hosp;
    int dim_n_II_hosp_1;
    int dim_n_II_hosp_12;
    int dim_n_II_hosp_2;
    int dim_n_II_hosp_3;
    int dim_n_II_ICU;
    int dim_n_II_ICU_1;
    int dim_n_II_ICU_12;
    int dim_n_II_ICU_2;
    int dim_n_II_ICU_3;
    int dim_n_II_ILI;
    int dim_n_II_ILI_1;
    int dim_n_II_ILI_12;
    int dim_n_II_ILI_2;
    int dim_n_II_ILI_3;
    int dim_n_II_mild;
    int dim_n_II_mild_1;
    int dim_n_II_mild_12;
    int dim_n_II_mild_2;
    int dim_n_II_mild_3;
    int dim_n_ILI_to_hosp;
    int dim_n_ILI_to_hosp_1;
    int dim_n_ILI_to_hosp_2;
    int dim_n_R_hosp;
    int dim_n_R_hosp_1;
    int dim_n_R_hosp_12;
    int dim_n_R_hosp_2;
    int dim_n_R_hosp_3;
    int dim_n_SE;
    int dim_new_D;
    int dim_new_I_ICU;
    int dim_new_I_ICU_1;
    int dim_new_I_ICU_12;
    int dim_new_I_ICU_2;
    int dim_new_I_ICU_3;
    int dim_p_asympt;
    int dim_p_death_hosp;
    int dim_p_recov_hosp;
    int dim_p_recov_ICU;
    int dim_p_recov_ILI;
    int dim_p_SE;
    int dim_p_sympt_ILI;
    int dim_R;
    int dim_R_hosp;
    int dim_R_hosp_1;
    int dim_R_hosp_12;
    int dim_R_hosp_2;
    int dim_R_hosp_3;
    int dim_S;
    int dim_s_ij;
    int dim_s_ij_1;
    int dim_s_ij_2;
    int dim_trans_increase;
    int dim_trans_increase_1;
    int dim_trans_increase_2;
    int dim_trans_profile;
    int dim_trans_profile_1;
    int dim_trans_profile_2;
    real_t dt;
    real_t gamma_asympt;
    real_t gamma_E;
    real_t gamma_hosp;
    real_t gamma_ICU;
    real_t gamma_ILI;
    real_t gamma_mild;
    real_t gamma_rec;
    real_t hosp_transmission;
    std::vector<real_t> I_with_diff_trans;
    real_t ICU_transmission;
    real_t initial_beta_out;
    std::vector<real_t> initial_D;
    real_t initial_D_tot;
    std::vector<real_t> initial_E;
    std::vector<real_t> initial_I_asympt;
    std::vector<real_t> initial_I_hosp;
    std::vector<real_t> initial_I_ICU;
    real_t initial_I_ICU_tot;
    std::vector<real_t> initial_I_ILI;
    std::vector<real_t> initial_I_mild;
    real_t initial_N_tot;
    std::vector<real_t> initial_R;
    std::vector<real_t> initial_R_hosp;
    std::vector<real_t> initial_S;
    real_t initial_time;
    std::vector<real_t> lambda;
    std::vector<real_t> m;
    int n_age_groups;
    std::vector<real_t> n_death_hosp;
    std::vector<real_t> n_EE;
    std::vector<real_t> n_EI_asympt;
    std::vector<real_t> n_EI_ILI;
    std::vector<real_t> n_EI_mild;
    std::vector<real_t> n_hosp_to_ICU;
    std::vector<real_t> n_ICU_to_R_hosp;
    std::vector<real_t> n_II_asympt;
    std::vector<real_t> n_II_hosp;
    std::vector<real_t> n_II_ICU;
    std::vector<real_t> n_II_ILI;
    std::vector<real_t> n_II_mild;
    std::vector<real_t> n_ILI_to_hosp;
    std::vector<real_t> n_R_hosp;
    std::vector<real_t> n_SE;
    int n_trans_classes;
    std::vector<real_t> new_D;
    std::vector<real_t> new_I_ICU;
    int offset_variable_D;
    int offset_variable_E;
    int offset_variable_I_asympt;
    int offset_variable_I_hosp;
    int offset_variable_I_ICU;
    int offset_variable_I_ILI;
    int offset_variable_I_mild;
    int offset_variable_R;
    int offset_variable_R_hosp;
    std::vector<real_t> p_asympt;
    std::vector<real_t> p_death_hosp;
    real_t p_EE;
    real_t p_II_asympt;
    real_t p_II_hosp;
    real_t p_II_ICU;
    real_t p_II_ILI;
    real_t p_II_mild;
    real_t p_R_hosp;
    std::vector<real_t> p_recov_hosp;
    std::vector<real_t> p_recov_ICU;
    std::vector<real_t> p_recov_ILI;
    std::vector<real_t> p_SE;
    std::vector<real_t> p_sympt_ILI;
    int s_asympt;
    int s_E;
    int s_hosp;
    int s_ICU;
    std::vector<real_t> s_ij;
    int s_ILI;
    int s_mild;
    int s_rec;
    std::vector<real_t> trans_increase;
    std::vector<real_t> trans_profile;
  };
  basic(const init_t& data): internal(data) {
  }
  size_t size() {
    return 5 + internal.dim_S + internal.dim_R + internal.dim_D + internal.dim_E + internal.dim_I_asympt + internal.dim_I_mild + internal.dim_I_ILI + internal.dim_I_hosp + internal.dim_I_ICU + internal.dim_R_hosp;
  }
  std::vector<real_t> initial(size_t step) {
    std::vector<real_t> state(5 + internal.dim_S + internal.dim_R + internal.dim_D + internal.dim_E + internal.dim_I_asympt + internal.dim_I_mild + internal.dim_I_ILI + internal.dim_I_hosp + internal.dim_I_ICU + internal.dim_R_hosp);
    state[0] = internal.initial_time;
    state[1] = internal.initial_N_tot;
    state[2] = internal.initial_I_ICU_tot;
    state[3] = internal.initial_D_tot;
    state[4] = internal.initial_beta_out;
    std::copy(internal.initial_S.begin(), internal.initial_S.end(), state.begin() + 5);
    std::copy(internal.initial_R.begin(), internal.initial_R.end(), state.begin() + internal.offset_variable_R);
    std::copy(internal.initial_D.begin(), internal.initial_D.end(), state.begin() + internal.offset_variable_D);
    std::copy(internal.initial_E.begin(), internal.initial_E.end(), state.begin() + internal.offset_variable_E);
    std::copy(internal.initial_I_asympt.begin(), internal.initial_I_asympt.end(), state.begin() + internal.offset_variable_I_asympt);
    std::copy(internal.initial_I_mild.begin(), internal.initial_I_mild.end(), state.begin() + internal.offset_variable_I_mild);
    std::copy(internal.initial_I_ILI.begin(), internal.initial_I_ILI.end(), state.begin() + internal.offset_variable_I_ILI);
    std::copy(internal.initial_I_hosp.begin(), internal.initial_I_hosp.end(), state.begin() + internal.offset_variable_I_hosp);
    std::copy(internal.initial_I_ICU.begin(), internal.initial_I_ICU.end(), state.begin() + internal.offset_variable_I_ICU);
    std::copy(internal.initial_R_hosp.begin(), internal.initial_R_hosp.end(), state.begin() + internal.offset_variable_R_hosp);
    return state;
  }
  #ifdef __NVCC__
  __device__
  #endif
  void update(size_t step, const real_t * state, dust::rng_state_t<real_t>& rng_state, real_t * state_next) {
    const real_t * S = state + 5;
    const real_t * E = state + internal.offset_variable_E;
    const real_t * I_asympt = state + internal.offset_variable_I_asympt;
    const real_t * I_mild = state + internal.offset_variable_I_mild;
    const real_t * I_ILI = state + internal.offset_variable_I_ILI;
    const real_t * R = state + internal.offset_variable_R;
    const real_t * I_hosp = state + internal.offset_variable_I_hosp;
    const real_t * I_ICU = state + internal.offset_variable_I_ICU;
    const real_t * R_hosp = state + internal.offset_variable_R_hosp;
    const real_t * D = state + internal.offset_variable_D;
    state_next[1] = odin_sum1(S, 0, internal.dim_S) + odin_sum1(R, 0, internal.dim_R) + odin_sum1(D, 0, internal.dim_D) + odin_sum1(E, 0, internal.dim_E) + odin_sum1(I_asympt, 0, internal.dim_I_asympt) + odin_sum1(I_mild, 0, internal.dim_I_mild) + odin_sum1(I_ILI, 0, internal.dim_I_ILI) + odin_sum1(I_hosp, 0, internal.dim_I_hosp) + odin_sum1(I_ICU, 0, internal.dim_I_ICU) + odin_sum1(R_hosp, 0, internal.dim_R_hosp);
    state_next[0] = (step + 1) * internal.dt;
    real_t beta = (step >= internal.dim_beta_step ? internal.beta_step[internal.dim_beta_step - 1] : internal.beta_step[step + 1 - 1]);
    state_next[4] = beta;
    for (int i = 1; i <= internal.dim_n_EE_1; ++i) {
      for (int j = 1; j <= internal.dim_n_EE_2; ++j) {
        for (int k = 1; k <= internal.dim_n_EE_3; ++k) {
          internal.n_EE[i - 1 + internal.dim_n_EE_1 * (j - 1) + internal.dim_n_EE_12 * (k - 1)] = dust::distr::rbinom(rng_state, std::round(E[internal.dim_E_12 * (k - 1) + internal.dim_E_1 * (j - 1) + i - 1]), internal.p_EE);
        }
      }
    }
    for (int i = 1; i <= internal.dim_n_II_asympt_1; ++i) {
      for (int j = 1; j <= internal.dim_n_II_asympt_2; ++j) {
        for (int k = 1; k <= internal.dim_n_II_asympt_3; ++k) {
          internal.n_II_asympt[i - 1 + internal.dim_n_II_asympt_1 * (j - 1) + internal.dim_n_II_asympt_12 * (k - 1)] = dust::distr::rbinom(rng_state, std::round(I_asympt[internal.dim_I_asympt_12 * (k - 1) + internal.dim_I_asympt_1 * (j - 1) + i - 1]), internal.p_II_asympt);
        }
      }
    }
    for (int i = 1; i <= internal.dim_n_II_hosp_1; ++i) {
      for (int j = 1; j <= internal.dim_n_II_hosp_2; ++j) {
        for (int k = 1; k <= internal.dim_n_II_hosp_3; ++k) {
          internal.n_II_hosp[i - 1 + internal.dim_n_II_hosp_1 * (j - 1) + internal.dim_n_II_hosp_12 * (k - 1)] = dust::distr::rbinom(rng_state, std::round(I_hosp[internal.dim_I_hosp_12 * (k - 1) + internal.dim_I_hosp_1 * (j - 1) + i - 1]), internal.p_II_hosp);
        }
      }
    }
    for (int i = 1; i <= internal.dim_n_II_ICU_1; ++i) {
      for (int j = 1; j <= internal.dim_n_II_ICU_2; ++j) {
        for (int k = 1; k <= internal.dim_n_II_ICU_3; ++k) {
          internal.n_II_ICU[i - 1 + internal.dim_n_II_ICU_1 * (j - 1) + internal.dim_n_II_ICU_12 * (k - 1)] = dust::distr::rbinom(rng_state, std::round(I_ICU[internal.dim_I_ICU_12 * (k - 1) + internal.dim_I_ICU_1 * (j - 1) + i - 1]), internal.p_II_ICU);
        }
      }
    }
    for (int i = 1; i <= internal.dim_n_II_ILI_1; ++i) {
      for (int j = 1; j <= internal.dim_n_II_ILI_2; ++j) {
        for (int k = 1; k <= internal.dim_n_II_ILI_3; ++k) {
          internal.n_II_ILI[i - 1 + internal.dim_n_II_ILI_1 * (j - 1) + internal.dim_n_II_ILI_12 * (k - 1)] = dust::distr::rbinom(rng_state, std::round(I_ILI[internal.dim_I_ILI_12 * (k - 1) + internal.dim_I_ILI_1 * (j - 1) + i - 1]), internal.p_II_ILI);
        }
      }
    }
    for (int i = 1; i <= internal.dim_n_II_mild_1; ++i) {
      for (int j = 1; j <= internal.dim_n_II_mild_2; ++j) {
        for (int k = 1; k <= internal.dim_n_II_mild_3; ++k) {
          internal.n_II_mild[i - 1 + internal.dim_n_II_mild_1 * (j - 1) + internal.dim_n_II_mild_12 * (k - 1)] = dust::distr::rbinom(rng_state, std::round(I_mild[internal.dim_I_mild_12 * (k - 1) + internal.dim_I_mild_1 * (j - 1) + i - 1]), internal.p_II_mild);
        }
      }
    }
    for (int i = 1; i <= internal.dim_n_R_hosp_1; ++i) {
      for (int j = 1; j <= internal.dim_n_R_hosp_2; ++j) {
        for (int k = 1; k <= internal.dim_n_R_hosp_3; ++k) {
          internal.n_R_hosp[i - 1 + internal.dim_n_R_hosp_1 * (j - 1) + internal.dim_n_R_hosp_12 * (k - 1)] = dust::distr::rbinom(rng_state, std::round(R_hosp[internal.dim_R_hosp_12 * (k - 1) + internal.dim_R_hosp_1 * (j - 1) + i - 1]), internal.p_R_hosp);
        }
      }
    }
    for (int i = 1; i <= internal.dim_I_with_diff_trans_1; ++i) {
      for (int j = 1; j <= internal.dim_I_with_diff_trans_2; ++j) {
        internal.I_with_diff_trans[i - 1 + internal.dim_I_with_diff_trans_1 * (j - 1)] = internal.trans_increase[internal.dim_trans_increase_1 * (j - 1) + i - 1] * (odin_sum3(I_asympt, i - 1, i, 0, internal.dim_I_asympt_2, j - 1, j, internal.dim_I_asympt_1, internal.dim_I_asympt_12) + odin_sum3(I_mild, i - 1, i, 0, internal.dim_I_mild_2, j - 1, j, internal.dim_I_mild_1, internal.dim_I_mild_12) + odin_sum3(I_ILI, i - 1, i, 0, internal.dim_I_ILI_2, j - 1, j, internal.dim_I_ILI_1, internal.dim_I_ILI_12) + internal.hosp_transmission * odin_sum3(I_hosp, i - 1, i, 0, internal.dim_I_hosp_2, j - 1, j, internal.dim_I_hosp_1, internal.dim_I_hosp_12) + internal.ICU_transmission * odin_sum3(I_ICU, i - 1, i, 0, internal.dim_I_ICU_2, j - 1, j, internal.dim_I_ICU_1, internal.dim_I_ICU_12));
      }
    }
    for (int i = 1; i <= internal.dim_n_death_hosp_1; ++i) {
      for (int j = 1; j <= internal.dim_n_death_hosp_2; ++j) {
        internal.n_death_hosp[i - 1 + internal.dim_n_death_hosp_1 * (j - 1)] = dust::distr::rbinom(rng_state, std::round(internal.n_II_hosp[internal.dim_n_II_hosp_12 * (j - 1) + internal.dim_n_II_hosp_1 * (internal.s_hosp - 1) + i - 1]), internal.p_death_hosp[i - 1]);
      }
    }
    for (int i = 1; i <= internal.dim_n_EI_asympt_1; ++i) {
      for (int j = 1; j <= internal.dim_n_EI_asympt_2; ++j) {
        internal.n_EI_asympt[i - 1 + internal.dim_n_EI_asympt_1 * (j - 1)] = dust::distr::rbinom(rng_state, std::round(internal.n_EE[internal.dim_n_EE_12 * (j - 1) + internal.dim_n_EE_1 * (internal.s_E - 1) + i - 1]), internal.p_asympt[i - 1]);
      }
    }
    for (int i = 1; i <= internal.dim_n_ICU_to_R_hosp_1; ++i) {
      for (int j = 1; j <= internal.dim_n_ICU_to_R_hosp_2; ++j) {
        internal.n_ICU_to_R_hosp[i - 1 + internal.dim_n_ICU_to_R_hosp_1 * (j - 1)] = dust::distr::rbinom(rng_state, std::round(internal.n_II_ICU[internal.dim_n_II_ICU_12 * (j - 1) + internal.dim_n_II_ICU_1 * (internal.s_ICU - 1) + i - 1]), internal.p_recov_ICU[i - 1]);
      }
    }
    for (int i = 1; i <= internal.dim_n_ILI_to_hosp_1; ++i) {
      for (int j = 1; j <= internal.dim_n_ILI_to_hosp_2; ++j) {
        internal.n_ILI_to_hosp[i - 1 + internal.dim_n_ILI_to_hosp_1 * (j - 1)] = dust::distr::rbinom(rng_state, std::round(internal.n_II_ILI[internal.dim_n_II_ILI_12 * (j - 1) + internal.dim_n_II_ILI_1 * (internal.s_ILI - 1) + i - 1]), 1 - internal.p_recov_ILI[i - 1]);
      }
    }
    for (int i = 1; i <= internal.dim_aux_II_asympt_1; ++i) {
      int j = 1;
      for (int k = 1; k <= internal.dim_aux_II_asympt_3; ++k) {
        internal.aux_II_asympt[i - 1 + internal.dim_aux_II_asympt_1 * (j - 1) + internal.dim_aux_II_asympt_12 * (k - 1)] = internal.n_EI_asympt[internal.dim_n_EI_asympt_1 * (k - 1) + i - 1];
      }
    }
    for (int i = 1; i <= internal.dim_aux_II_asympt_1; ++i) {
      for (int j = 2; j <= internal.s_asympt; ++j) {
        for (int k = 1; k <= internal.dim_aux_II_asympt_3; ++k) {
          internal.aux_II_asympt[i - 1 + internal.dim_aux_II_asympt_1 * (j - 1) + internal.dim_aux_II_asympt_12 * (k - 1)] = internal.n_II_asympt[internal.dim_n_II_asympt_12 * (k - 1) + internal.dim_n_II_asympt_1 * (j - 1 - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= internal.dim_aux_II_asympt_1; ++i) {
      for (int j = 1; j <= internal.s_asympt; ++j) {
        for (int k = 1; k <= internal.dim_aux_II_asympt_3; ++k) {
          internal.aux_II_asympt[i - 1 + internal.dim_aux_II_asympt_1 * (j - 1) + internal.dim_aux_II_asympt_12 * (k - 1)] = internal.aux_II_asympt[internal.dim_aux_II_asympt_12 * (k - 1) + internal.dim_aux_II_asympt_1 * (j - 1) + i - 1] - internal.n_II_asympt[internal.dim_n_II_asympt_12 * (k - 1) + internal.dim_n_II_asympt_1 * (j - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= internal.dim_aux_II_hosp_1; ++i) {
      int j = 1;
      for (int k = 1; k <= internal.dim_aux_II_hosp_3; ++k) {
        internal.aux_II_hosp[i - 1 + internal.dim_aux_II_hosp_1 * (j - 1) + internal.dim_aux_II_hosp_12 * (k - 1)] = internal.n_ILI_to_hosp[internal.dim_n_ILI_to_hosp_1 * (k - 1) + i - 1];
      }
    }
    for (int i = 1; i <= internal.dim_aux_II_hosp_1; ++i) {
      for (int j = 2; j <= internal.s_hosp; ++j) {
        for (int k = 1; k <= internal.dim_aux_II_hosp_3; ++k) {
          internal.aux_II_hosp[i - 1 + internal.dim_aux_II_hosp_1 * (j - 1) + internal.dim_aux_II_hosp_12 * (k - 1)] = internal.n_II_hosp[internal.dim_n_II_hosp_12 * (k - 1) + internal.dim_n_II_hosp_1 * (j - 1 - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= internal.dim_aux_II_hosp_1; ++i) {
      for (int j = 1; j <= internal.s_hosp; ++j) {
        for (int k = 1; k <= internal.dim_aux_II_hosp_3; ++k) {
          internal.aux_II_hosp[i - 1 + internal.dim_aux_II_hosp_1 * (j - 1) + internal.dim_aux_II_hosp_12 * (k - 1)] = internal.aux_II_hosp[internal.dim_aux_II_hosp_12 * (k - 1) + internal.dim_aux_II_hosp_1 * (j - 1) + i - 1] - internal.n_II_hosp[internal.dim_n_II_hosp_12 * (k - 1) + internal.dim_n_II_hosp_1 * (j - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= internal.dim_aux_R_hosp_1; ++i) {
      int j = 1;
      for (int k = 1; k <= internal.dim_aux_R_hosp_3; ++k) {
        internal.aux_R_hosp[i - 1 + internal.dim_aux_R_hosp_1 * (j - 1) + internal.dim_aux_R_hosp_12 * (k - 1)] = internal.n_ICU_to_R_hosp[internal.dim_n_ICU_to_R_hosp_1 * (k - 1) + i - 1];
      }
    }
    for (int i = 1; i <= internal.dim_aux_R_hosp_1; ++i) {
      for (int j = 2; j <= internal.s_rec; ++j) {
        for (int k = 1; k <= internal.dim_aux_R_hosp_3; ++k) {
          internal.aux_R_hosp[i - 1 + internal.dim_aux_R_hosp_1 * (j - 1) + internal.dim_aux_R_hosp_12 * (k - 1)] = internal.n_R_hosp[internal.dim_n_R_hosp_12 * (k - 1) + internal.dim_n_R_hosp_1 * (j - 1 - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= internal.dim_aux_R_hosp_1; ++i) {
      for (int j = 1; j <= internal.s_rec; ++j) {
        for (int k = 1; k <= internal.dim_aux_R_hosp_3; ++k) {
          internal.aux_R_hosp[i - 1 + internal.dim_aux_R_hosp_1 * (j - 1) + internal.dim_aux_R_hosp_12 * (k - 1)] = internal.aux_R_hosp[internal.dim_aux_R_hosp_12 * (k - 1) + internal.dim_aux_R_hosp_1 * (j - 1) + i - 1] - internal.n_R_hosp[internal.dim_n_R_hosp_12 * (k - 1) + internal.dim_n_R_hosp_1 * (j - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= internal.dim_delta_D; ++i) {
      internal.delta_D[i - 1] = odin_sum3(internal.n_II_ICU.data(), i - 1, i, internal.s_ICU - 1, internal.s_ICU, 0, internal.dim_n_II_ICU_3, internal.dim_n_II_ICU_1, internal.dim_n_II_ICU_12) - odin_sum2(internal.n_ICU_to_R_hosp.data(), i - 1, i, 0, internal.dim_n_ICU_to_R_hosp_2, internal.dim_n_ICU_to_R_hosp_1) + odin_sum2(internal.n_death_hosp.data(), i - 1, i, 0, internal.dim_n_death_hosp_2, internal.dim_n_death_hosp_1);
    }
    for (int i = 1; i <= internal.dim_n_EI_mild_1; ++i) {
      for (int j = 1; j <= internal.dim_n_EI_mild_2; ++j) {
        internal.n_EI_mild[i - 1 + internal.dim_n_EI_mild_1 * (j - 1)] = dust::distr::rbinom(rng_state, std::round(internal.n_EE[internal.dim_n_EE_12 * (j - 1) + internal.dim_n_EE_1 * (internal.s_E - 1) + i - 1] - internal.n_EI_asympt[internal.dim_n_EI_asympt_1 * (j - 1) + i - 1]), 1 - internal.p_sympt_ILI[i - 1]);
      }
    }
    for (int i = 1; i <= internal.dim_n_hosp_to_ICU_1; ++i) {
      for (int j = 1; j <= internal.dim_n_hosp_to_ICU_2; ++j) {
        internal.n_hosp_to_ICU[i - 1 + internal.dim_n_hosp_to_ICU_1 * (j - 1)] = dust::distr::rbinom(rng_state, std::round(internal.n_II_hosp[internal.dim_n_II_hosp_12 * (j - 1) + internal.dim_n_II_hosp_1 * (internal.s_hosp - 1) + i - 1] - internal.n_death_hosp[internal.dim_n_death_hosp_1 * (j - 1) + i - 1]), 1 - internal.p_recov_hosp[i - 1] - internal.p_death_hosp[i - 1]);
      }
    }
    for (int i = 1; i <= internal.dim_s_ij_1; ++i) {
      for (int j = 1; j <= internal.dim_s_ij_2; ++j) {
        internal.s_ij[i - 1 + internal.dim_s_ij_1 * (j - 1)] = internal.m[internal.dim_m_1 * (j - 1) + i - 1] * odin_sum2(internal.I_with_diff_trans.data(), j - 1, j, 0, internal.dim_I_with_diff_trans_2, internal.dim_I_with_diff_trans_1);
      }
    }
    for (int i = 1; i <= internal.dim_aux_II_ICU_1; ++i) {
      int j = 1;
      for (int k = 1; k <= internal.dim_aux_II_ICU_3; ++k) {
        internal.aux_II_ICU[i - 1 + internal.dim_aux_II_ICU_1 * (j - 1) + internal.dim_aux_II_ICU_12 * (k - 1)] = internal.n_hosp_to_ICU[internal.dim_n_hosp_to_ICU_1 * (k - 1) + i - 1];
      }
    }
    for (int i = 1; i <= internal.dim_aux_II_ICU_1; ++i) {
      for (int j = 2; j <= internal.s_ICU; ++j) {
        for (int k = 1; k <= internal.dim_aux_II_ICU_3; ++k) {
          internal.aux_II_ICU[i - 1 + internal.dim_aux_II_ICU_1 * (j - 1) + internal.dim_aux_II_ICU_12 * (k - 1)] = internal.n_II_ICU[internal.dim_n_II_ICU_12 * (k - 1) + internal.dim_n_II_ICU_1 * (j - 1 - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= internal.dim_aux_II_ICU_1; ++i) {
      for (int j = 1; j <= internal.s_ICU; ++j) {
        for (int k = 1; k <= internal.dim_aux_II_ICU_3; ++k) {
          internal.aux_II_ICU[i - 1 + internal.dim_aux_II_ICU_1 * (j - 1) + internal.dim_aux_II_ICU_12 * (k - 1)] = internal.aux_II_ICU[internal.dim_aux_II_ICU_12 * (k - 1) + internal.dim_aux_II_ICU_1 * (j - 1) + i - 1] - internal.n_II_ICU[internal.dim_n_II_ICU_12 * (k - 1) + internal.dim_n_II_ICU_1 * (j - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= internal.dim_aux_II_mild_1; ++i) {
      int j = 1;
      for (int k = 1; k <= internal.dim_aux_II_mild_3; ++k) {
        internal.aux_II_mild[i - 1 + internal.dim_aux_II_mild_1 * (j - 1) + internal.dim_aux_II_mild_12 * (k - 1)] = internal.n_EI_mild[internal.dim_n_EI_mild_1 * (k - 1) + i - 1];
      }
    }
    for (int i = 1; i <= internal.dim_aux_II_mild_1; ++i) {
      for (int j = 2; j <= internal.s_mild; ++j) {
        for (int k = 1; k <= internal.dim_aux_II_mild_3; ++k) {
          internal.aux_II_mild[i - 1 + internal.dim_aux_II_mild_1 * (j - 1) + internal.dim_aux_II_mild_12 * (k - 1)] = internal.n_II_mild[internal.dim_n_II_mild_12 * (k - 1) + internal.dim_n_II_mild_1 * (j - 1 - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= internal.dim_aux_II_mild_1; ++i) {
      for (int j = 1; j <= internal.s_mild; ++j) {
        for (int k = 1; k <= internal.dim_aux_II_mild_3; ++k) {
          internal.aux_II_mild[i - 1 + internal.dim_aux_II_mild_1 * (j - 1) + internal.dim_aux_II_mild_12 * (k - 1)] = internal.aux_II_mild[internal.dim_aux_II_mild_12 * (k - 1) + internal.dim_aux_II_mild_1 * (j - 1) + i - 1] - internal.n_II_mild[internal.dim_n_II_mild_12 * (k - 1) + internal.dim_n_II_mild_1 * (j - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= internal.dim_delta_I_asympt_1; ++i) {
      for (int j = 1; j <= internal.dim_delta_I_asympt_2; ++j) {
        for (int k = 1; k <= internal.dim_delta_I_asympt_3; ++k) {
          internal.delta_I_asympt[i - 1 + internal.dim_delta_I_asympt_1 * (j - 1) + internal.dim_delta_I_asympt_12 * (k - 1)] = internal.aux_II_asympt[internal.dim_aux_II_asympt_12 * (k - 1) + internal.dim_aux_II_asympt_1 * (j - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= internal.dim_delta_I_hosp_1; ++i) {
      for (int j = 1; j <= internal.dim_delta_I_hosp_2; ++j) {
        for (int k = 1; k <= internal.dim_delta_I_hosp_3; ++k) {
          internal.delta_I_hosp[i - 1 + internal.dim_delta_I_hosp_1 * (j - 1) + internal.dim_delta_I_hosp_12 * (k - 1)] = internal.aux_II_hosp[internal.dim_aux_II_hosp_12 * (k - 1) + internal.dim_aux_II_hosp_1 * (j - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= internal.dim_delta_R; ++i) {
      internal.delta_R[i - 1] = odin_sum3(internal.n_II_asympt.data(), i - 1, i, internal.s_asympt - 1, internal.s_asympt, 0, internal.dim_n_II_asympt_3, internal.dim_n_II_asympt_1, internal.dim_n_II_asympt_12) + odin_sum3(internal.n_II_mild.data(), i - 1, i, internal.s_mild - 1, internal.s_mild, 0, internal.dim_n_II_mild_3, internal.dim_n_II_mild_1, internal.dim_n_II_mild_12) + odin_sum3(internal.n_II_ILI.data(), i - 1, i, internal.s_ILI - 1, internal.s_ILI, 0, internal.dim_n_II_ILI_3, internal.dim_n_II_ILI_1, internal.dim_n_II_ILI_12) - odin_sum2(internal.n_ILI_to_hosp.data(), i - 1, i, 0, internal.dim_n_ILI_to_hosp_2, internal.dim_n_ILI_to_hosp_1) + odin_sum3(internal.n_II_hosp.data(), i - 1, i, internal.s_hosp - 1, internal.s_hosp, 0, internal.dim_n_II_hosp_3, internal.dim_n_II_hosp_1, internal.dim_n_II_hosp_12) - odin_sum2(internal.n_hosp_to_ICU.data(), i - 1, i, 0, internal.dim_n_hosp_to_ICU_2, internal.dim_n_hosp_to_ICU_1) - odin_sum2(internal.n_death_hosp.data(), i - 1, i, 0, internal.dim_n_death_hosp_2, internal.dim_n_death_hosp_1) + odin_sum3(internal.n_R_hosp.data(), i - 1, i, internal.s_rec - 1, internal.s_rec, 0, internal.dim_n_R_hosp_3, internal.dim_n_R_hosp_1, internal.dim_n_R_hosp_12);
    }
    for (int i = 1; i <= internal.dim_delta_R_hosp_1; ++i) {
      for (int j = 1; j <= internal.dim_delta_R_hosp_2; ++j) {
        for (int k = 1; k <= internal.dim_delta_R_hosp_3; ++k) {
          internal.delta_R_hosp[i - 1 + internal.dim_delta_R_hosp_1 * (j - 1) + internal.dim_delta_R_hosp_12 * (k - 1)] = internal.aux_R_hosp[internal.dim_aux_R_hosp_12 * (k - 1) + internal.dim_aux_R_hosp_1 * (j - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= internal.dim_lambda; ++i) {
      internal.lambda[i - 1] = beta * odin_sum2(internal.s_ij.data(), i - 1, i, 0, internal.dim_s_ij_2, internal.dim_s_ij_1);
    }
    for (int i = 1; i <= internal.dim_n_EI_ILI_1; ++i) {
      for (int j = 1; j <= internal.dim_n_EI_ILI_2; ++j) {
        internal.n_EI_ILI[i - 1 + internal.dim_n_EI_ILI_1 * (j - 1)] = internal.n_EE[internal.dim_n_EE_12 * (j - 1) + internal.dim_n_EE_1 * (internal.s_E - 1) + i - 1] - internal.n_EI_asympt[internal.dim_n_EI_asympt_1 * (j - 1) + i - 1] - internal.n_EI_mild[internal.dim_n_EI_mild_1 * (j - 1) + i - 1];
      }
    }
    for (int i = 1; i <= internal.dim_new_D; ++i) {
      internal.new_D[i - 1] = D[i - 1] + internal.delta_D[i - 1];
    }
    for (int i = 1; i <= internal.dim_aux_II_ILI_1; ++i) {
      int j = 1;
      for (int k = 1; k <= internal.dim_aux_II_ILI_3; ++k) {
        internal.aux_II_ILI[i - 1 + internal.dim_aux_II_ILI_1 * (j - 1) + internal.dim_aux_II_ILI_12 * (k - 1)] = internal.n_EI_ILI[internal.dim_n_EI_ILI_1 * (k - 1) + i - 1];
      }
    }
    for (int i = 1; i <= internal.dim_aux_II_ILI_1; ++i) {
      for (int j = 2; j <= internal.s_ILI; ++j) {
        for (int k = 1; k <= internal.dim_aux_II_ILI_3; ++k) {
          internal.aux_II_ILI[i - 1 + internal.dim_aux_II_ILI_1 * (j - 1) + internal.dim_aux_II_ILI_12 * (k - 1)] = internal.n_II_ILI[internal.dim_n_II_ILI_12 * (k - 1) + internal.dim_n_II_ILI_1 * (j - 1 - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= internal.dim_aux_II_ILI_1; ++i) {
      for (int j = 1; j <= internal.s_ILI; ++j) {
        for (int k = 1; k <= internal.dim_aux_II_ILI_3; ++k) {
          internal.aux_II_ILI[i - 1 + internal.dim_aux_II_ILI_1 * (j - 1) + internal.dim_aux_II_ILI_12 * (k - 1)] = internal.aux_II_ILI[internal.dim_aux_II_ILI_12 * (k - 1) + internal.dim_aux_II_ILI_1 * (j - 1) + i - 1] - internal.n_II_ILI[internal.dim_n_II_ILI_12 * (k - 1) + internal.dim_n_II_ILI_1 * (j - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= internal.dim_delta_I_ICU_1; ++i) {
      for (int j = 1; j <= internal.dim_delta_I_ICU_2; ++j) {
        for (int k = 1; k <= internal.dim_delta_I_ICU_3; ++k) {
          internal.delta_I_ICU[i - 1 + internal.dim_delta_I_ICU_1 * (j - 1) + internal.dim_delta_I_ICU_12 * (k - 1)] = internal.aux_II_ICU[internal.dim_aux_II_ICU_12 * (k - 1) + internal.dim_aux_II_ICU_1 * (j - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= internal.dim_delta_I_mild_1; ++i) {
      for (int j = 1; j <= internal.dim_delta_I_mild_2; ++j) {
        for (int k = 1; k <= internal.dim_delta_I_mild_3; ++k) {
          internal.delta_I_mild[i - 1 + internal.dim_delta_I_mild_1 * (j - 1) + internal.dim_delta_I_mild_12 * (k - 1)] = internal.aux_II_mild[internal.dim_aux_II_mild_12 * (k - 1) + internal.dim_aux_II_mild_1 * (j - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= internal.dim_p_SE; ++i) {
      internal.p_SE[i - 1] = 1 - std::exp(- internal.lambda[i - 1] * internal.dt);
    }
    for (int i = 1; i <= internal.dim_D; ++i) {
      state_next[internal.offset_variable_D + i - 1] = internal.new_D[i - 1];
    }
    state_next[3] = odin_sum1(internal.new_D.data(), 0, internal.dim_new_D);
    for (int i = 1; i <= internal.dim_I_asympt_1; ++i) {
      for (int j = 1; j <= internal.dim_I_asympt_2; ++j) {
        for (int k = 1; k <= internal.dim_I_asympt_3; ++k) {
          state_next[internal.offset_variable_I_asympt + i - 1 + internal.dim_I_asympt_1 * (j - 1) + internal.dim_I_asympt_12 * (k - 1)] = I_asympt[internal.dim_I_asympt_12 * (k - 1) + internal.dim_I_asympt_1 * (j - 1) + i - 1] + internal.delta_I_asympt[internal.dim_delta_I_asympt_12 * (k - 1) + internal.dim_delta_I_asympt_1 * (j - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= internal.dim_I_hosp_1; ++i) {
      for (int j = 1; j <= internal.dim_I_hosp_2; ++j) {
        for (int k = 1; k <= internal.dim_I_hosp_3; ++k) {
          state_next[internal.offset_variable_I_hosp + i - 1 + internal.dim_I_hosp_1 * (j - 1) + internal.dim_I_hosp_12 * (k - 1)] = I_hosp[internal.dim_I_hosp_12 * (k - 1) + internal.dim_I_hosp_1 * (j - 1) + i - 1] + internal.delta_I_hosp[internal.dim_delta_I_hosp_12 * (k - 1) + internal.dim_delta_I_hosp_1 * (j - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= internal.dim_R; ++i) {
      state_next[internal.offset_variable_R + i - 1] = R[i - 1] + internal.delta_R[i - 1];
    }
    for (int i = 1; i <= internal.dim_R_hosp_1; ++i) {
      for (int j = 1; j <= internal.dim_R_hosp_2; ++j) {
        for (int k = 1; k <= internal.dim_R_hosp_3; ++k) {
          state_next[internal.offset_variable_R_hosp + i - 1 + internal.dim_R_hosp_1 * (j - 1) + internal.dim_R_hosp_12 * (k - 1)] = R_hosp[internal.dim_R_hosp_12 * (k - 1) + internal.dim_R_hosp_1 * (j - 1) + i - 1] + internal.delta_R_hosp[internal.dim_delta_R_hosp_12 * (k - 1) + internal.dim_delta_R_hosp_1 * (j - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= internal.dim_delta_I_ILI_1; ++i) {
      for (int j = 1; j <= internal.dim_delta_I_ILI_2; ++j) {
        for (int k = 1; k <= internal.dim_delta_I_ILI_3; ++k) {
          internal.delta_I_ILI[i - 1 + internal.dim_delta_I_ILI_1 * (j - 1) + internal.dim_delta_I_ILI_12 * (k - 1)] = internal.aux_II_ILI[internal.dim_aux_II_ILI_12 * (k - 1) + internal.dim_aux_II_ILI_1 * (j - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= internal.dim_n_SE; ++i) {
      internal.n_SE[i - 1] = dust::distr::rbinom(rng_state, std::round(S[i - 1]), internal.p_SE[i - 1]);
    }
    for (int i = 1; i <= internal.dim_new_I_ICU_1; ++i) {
      for (int j = 1; j <= internal.dim_new_I_ICU_2; ++j) {
        for (int k = 1; k <= internal.dim_new_I_ICU_3; ++k) {
          internal.new_I_ICU[i - 1 + internal.dim_new_I_ICU_1 * (j - 1) + internal.dim_new_I_ICU_12 * (k - 1)] = I_ICU[internal.dim_I_ICU_12 * (k - 1) + internal.dim_I_ICU_1 * (j - 1) + i - 1] + internal.delta_I_ICU[internal.dim_delta_I_ICU_12 * (k - 1) + internal.dim_delta_I_ICU_1 * (j - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= internal.dim_I_mild_1; ++i) {
      for (int j = 1; j <= internal.dim_I_mild_2; ++j) {
        for (int k = 1; k <= internal.dim_I_mild_3; ++k) {
          state_next[internal.offset_variable_I_mild + i - 1 + internal.dim_I_mild_1 * (j - 1) + internal.dim_I_mild_12 * (k - 1)] = I_mild[internal.dim_I_mild_12 * (k - 1) + internal.dim_I_mild_1 * (j - 1) + i - 1] + internal.delta_I_mild[internal.dim_delta_I_mild_12 * (k - 1) + internal.dim_delta_I_mild_1 * (j - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= internal.dim_aux_EE_1; ++i) {
      int j = 1;
      int k = 1;
      internal.aux_EE[i - 1 + internal.dim_aux_EE_1 * (j - 1) + internal.dim_aux_EE_12 * (k - 1)] = dust::distr::rbinom(rng_state, std::round(internal.n_SE[i - 1]), internal.aux_p_bin[internal.dim_aux_p_bin_1 * 0 + i - 1]);
    }
    for (int i = 1; i <= internal.dim_aux_EE_1; ++i) {
      int j = 1;
      for (int k = 2; k <= (internal.n_trans_classes - 1); ++k) {
        internal.aux_EE[i - 1 + internal.dim_aux_EE_1 * (j - 1) + internal.dim_aux_EE_12 * (k - 1)] = dust::distr::rbinom(rng_state, std::round(internal.n_SE[i - 1] - odin_sum3(internal.aux_EE.data(), i - 1, i, 0, 1, 0, k - 1, internal.dim_aux_EE_1, internal.dim_aux_EE_12)), internal.aux_p_bin[internal.dim_aux_p_bin_1 * (k - 1) + i - 1]);
      }
    }
    for (int i = 1; i <= internal.dim_aux_EE_1; ++i) {
      int j = 1;
      int k = internal.n_trans_classes;
      internal.aux_EE[i - 1 + internal.dim_aux_EE_1 * (j - 1) + internal.dim_aux_EE_12 * (k - 1)] = internal.n_SE[i - 1] - odin_sum3(internal.aux_EE.data(), i - 1, i, 0, 1, 0, internal.n_trans_classes - 1, internal.dim_aux_EE_1, internal.dim_aux_EE_12);
    }
    for (int i = 1; i <= internal.dim_aux_EE_1; ++i) {
      for (int j = 2; j <= internal.s_E; ++j) {
        for (int k = 1; k <= internal.dim_aux_EE_3; ++k) {
          internal.aux_EE[i - 1 + internal.dim_aux_EE_1 * (j - 1) + internal.dim_aux_EE_12 * (k - 1)] = internal.n_EE[internal.dim_n_EE_12 * (k - 1) + internal.dim_n_EE_1 * (j - 1 - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= internal.dim_aux_EE_1; ++i) {
      for (int j = 1; j <= internal.s_E; ++j) {
        for (int k = 1; k <= internal.dim_aux_EE_3; ++k) {
          internal.aux_EE[i - 1 + internal.dim_aux_EE_1 * (j - 1) + internal.dim_aux_EE_12 * (k - 1)] = internal.aux_EE[internal.dim_aux_EE_12 * (k - 1) + internal.dim_aux_EE_1 * (j - 1) + i - 1] - internal.n_EE[internal.dim_n_EE_12 * (k - 1) + internal.dim_n_EE_1 * (j - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= internal.dim_I_ICU_1; ++i) {
      for (int j = 1; j <= internal.dim_I_ICU_2; ++j) {
        for (int k = 1; k <= internal.dim_I_ICU_3; ++k) {
          state_next[internal.offset_variable_I_ICU + i - 1 + internal.dim_I_ICU_1 * (j - 1) + internal.dim_I_ICU_12 * (k - 1)] = internal.new_I_ICU[internal.dim_new_I_ICU_12 * (k - 1) + internal.dim_new_I_ICU_1 * (j - 1) + i - 1];
        }
      }
    }
    state_next[2] = odin_sum1(internal.new_I_ICU.data(), 0, internal.dim_new_I_ICU);
    for (int i = 1; i <= internal.dim_I_ILI_1; ++i) {
      for (int j = 1; j <= internal.dim_I_ILI_2; ++j) {
        for (int k = 1; k <= internal.dim_I_ILI_3; ++k) {
          state_next[internal.offset_variable_I_ILI + i - 1 + internal.dim_I_ILI_1 * (j - 1) + internal.dim_I_ILI_12 * (k - 1)] = I_ILI[internal.dim_I_ILI_12 * (k - 1) + internal.dim_I_ILI_1 * (j - 1) + i - 1] + internal.delta_I_ILI[internal.dim_delta_I_ILI_12 * (k - 1) + internal.dim_delta_I_ILI_1 * (j - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= internal.dim_S; ++i) {
      state_next[5 + i - 1] = S[i - 1] - internal.n_SE[i - 1];
    }
    for (int i = 1; i <= internal.dim_delta_E_1; ++i) {
      for (int j = 1; j <= internal.dim_delta_E_2; ++j) {
        for (int k = 1; k <= internal.dim_delta_E_3; ++k) {
          internal.delta_E[i - 1 + internal.dim_delta_E_1 * (j - 1) + internal.dim_delta_E_12 * (k - 1)] = internal.aux_EE[internal.dim_aux_EE_12 * (k - 1) + internal.dim_aux_EE_1 * (j - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= internal.dim_E_1; ++i) {
      for (int j = 1; j <= internal.dim_E_2; ++j) {
        for (int k = 1; k <= internal.dim_E_3; ++k) {
          state_next[internal.offset_variable_E + i - 1 + internal.dim_E_1 * (j - 1) + internal.dim_E_12 * (k - 1)] = E[internal.dim_E_12 * (k - 1) + internal.dim_E_1 * (j - 1) + i - 1] + internal.delta_E[internal.dim_delta_E_12 * (k - 1) + internal.dim_delta_E_1 * (j - 1) + i - 1];
        }
      }
    }
  }
private:
  init_t internal;
};
template <typename real_t>
real_t odin_sum2(const real_t * x, int from_i, int to_i, int from_j, int to_j, int dim_x_1) {
  real_t tot = 0.0;
  for (int j = from_j; j < to_j; ++j) {
    int jj = j * dim_x_1;
    for (int i = from_i; i < to_i; ++i) {
      tot += x[i + jj];
    }
  }
  return tot;
}
template <typename real_t>
real_t odin_sum3(const real_t * x, int from_i, int to_i, int from_j, int to_j, int from_k, int to_k, int dim_x_1, int dim_x_12) {
  real_t tot = 0.0;
  for (int k = from_k; k < to_k; ++k) {
    int kk = k * dim_x_12;
    for (int j = from_j; j < to_j; ++j) {
      int jj = j * dim_x_1 + kk;
      for (int i = from_i; i < to_i; ++i) {
        tot += x[i + jj];
      }
    }
  }
  return tot;
}
#include <array>
#include <cpp11/R.hpp>
#include <cpp11/sexp.hpp>
#include <cpp11/doubles.hpp>
#include <cpp11/integers.hpp>
#include <cpp11/list.hpp>
#include <cpp11/strings.hpp>
#include <vector>

// These would be nice to make constexpr but the way that NA values
// are defined in R's include files do not allow it.
template <typename T>
inline T na_value();

template <>
inline int na_value<int>() {
  return NA_INTEGER;
}

template <>
inline double na_value<double>() {
  return NA_REAL;
}

template <typename T>
inline bool is_na(T x);

template <>
inline bool is_na(int x) {
  return x == NA_INTEGER;
}

template <>
inline bool is_na(double x) {
  return ISNA(x);
}

inline size_t object_length(cpp11::sexp x) {
  return ::Rf_xlength(x);
}

template <typename T>
void user_check_value(T value, const char *name, T min, T max) {
  if (ISNA(value)) {
    cpp11::stop("'%s' must not be NA", name);
  }
  if (min != na_value<T>() && value < min) {
    cpp11::stop("Expected '%s' to be at least %g", name, (double) min);
  }
  if (max != na_value<T>() && value > max) {
    cpp11::stop("Expected '%s' to be at most %g", name, (double) max);
  }
}

template <typename T>
void user_check_array_value(const std::vector<T>& value, const char *name,
                            T min, T max) {
  for (auto& x : value) {
    user_check_value(x, name, min, max);
  }
}

inline size_t user_get_array_rank(cpp11::sexp x) {
  if (!::Rf_isArray(x)) {
    return 1;
  } else {
    cpp11::integers dim = cpp11::as_cpp<cpp11::integers>(x.attr("dim"));
    return dim.size();
  }
}

template <size_t N>
void user_check_array_rank(cpp11::sexp x, const char *name) {
  size_t rank = user_get_array_rank(x);
  if (rank != N) {
    if (N == 1) {
      cpp11::stop("Expected a vector for '%s'", name);
    } else if (N == 2) {
      cpp11::stop("Expected a matrix for '%s'", name);
    } else {
      cpp11::stop("Expected an array of rank %d for '%s'", N, name);
    }
  }
}

template <size_t N>
void user_check_array_dim(cpp11::sexp x, const char *name,
                          const std::array<int, N>& dim_expected) {
  cpp11::integers dim = cpp11::as_cpp<cpp11::integers>(x.attr("dim"));
  for (size_t i = 0; i < N; ++i) {
    if (dim[(int)i] != dim_expected[i]) {
      Rf_error("Incorrect size of dimension %d of '%s' (expected %d)",
               i + 1, name, dim_expected[i]);
    }
  }
}

template <>
inline void user_check_array_dim<1>(cpp11::sexp x, const char *name,
                                    const std::array<int, 1>& dim_expected) {
  if ((int)object_length(x) != dim_expected[0]) {
    cpp11::stop("Expected length %d value for '%s'", dim_expected[0], name);
  }
}

template <size_t N>
void user_set_array_dim(cpp11::sexp x, const char *name,
                        std::array<int, N>& dim) {
  cpp11::integers dim_given = cpp11::as_cpp<cpp11::integers>(x.attr("dim"));
  std::copy(dim_given.begin(), dim_given.end(), dim.begin());
}

template <>
inline void user_set_array_dim<1>(cpp11::sexp x, const char *name,
                                  std::array<int, 1>& dim) {
  dim[0] = object_length(x);
}

template <typename T>
T user_get_scalar(cpp11::list user, const char *name,
                  const T previous, T min, T max) {
  T ret = previous;
  cpp11::sexp x = user[name];
  if (x != R_NilValue) {
    if (object_length(x) != 1) {
      cpp11::stop("Expected a scalar numeric for '%s'", name);
    }
    // TODO: when we're getting out an integer this is a bit too relaxed
    if (TYPEOF(x) == REALSXP) {
      ret = cpp11::as_cpp<T>(x);
    } else if (TYPEOF(x) == INTSXP) {
      ret = cpp11::as_cpp<T>(x);
    } else {
      cpp11::stop("Expected a numeric value for %s", name);
    }
  }

  if (is_na(ret)) {
    cpp11::stop("Expected a value for '%s'", name);
  }
  user_check_value<T>(ret, name, min, max);
  return ret;
}

// This is not actually really enough to work generally as there's an
// issue with what to do with checking previous, min and max against
// NA_REAL -- which is not going to be the correct value for float
// rather than double.  Further, this is not extendable to the vector
// cases because we hit issues around partial template specification.
//
// We can make the latter go away by replacing std::array<T, N> with
// std::vector<T> - the cost is not great.  But the NA issues remain
// and will require further thought. However, this template
// specialisation and the tests that use it ensure that the core code
// generation is at least compatible with floats.
//
// See #6
template <>
inline float user_get_scalar<float>(cpp11::list user, const char *name,
                                    const float previous, float min, float max) {
  double value = user_get_scalar<double>(user, name, previous, min, max);
  return static_cast<float>(value);
}

template <typename T, size_t N>
std::vector<T> user_get_array_fixed(cpp11::list user, const char *name,
                                    const std::vector<T> previous,
                                    const std::array<int, N>& dim,
                                    T min, T max) {
  cpp11::sexp x = user[name];
  if (x == R_NilValue) {
    if (previous.size() == 0) {
      cpp11::stop("Expected a value for '%s'", name);
    }
    return previous;
  }

  user_check_array_rank<N>(x, name);
  user_check_array_dim<N>(x, name, dim);

  std::vector<T> ret = cpp11::as_cpp<std::vector<T>>(x);
  user_check_array_value(ret, name, min, max);

  return ret;
}

template <typename T, size_t N>
std::vector<T> user_get_array_variable(cpp11::list user, const char *name,
                                       std::vector<T> previous,
                                       std::array<int, N>& dim,
                                       T min, T max) {
  cpp11::sexp x = user[name];
  if (x == R_NilValue) {
    if (previous.size() == 0) {
      cpp11::stop("Expected a value for '%s'", name);
    }
    return previous;
  }

  user_check_array_rank<N>(x, name);
  user_set_array_dim<N>(x, name, dim);

  std::vector<T> ret = cpp11::as_cpp<std::vector<T>>(x);
  user_check_array_value(ret, name, min, max);

  return ret;
}

// This is sum with inclusive "from", exclusive "to", following the
// same function in odin
template <typename T>
#ifdef __NVCC__
__host__ __device__
#endif
T odin_sum1(const T * x, size_t from, size_t to) {
  T tot = 0.0;
  for (size_t i = from; i < to; ++i) {
    tot += x[i];
  }
  return tot;
}


inline cpp11::writable::integers integer_sequence(size_t from, size_t len) {
  cpp11::writable::integers ret(len);
  int* data = INTEGER(ret);
  for (size_t i = 0, j = from; i < len; ++i, ++j) {
    data[i] = j;
  }
  return ret;
}
template<>
basic::init_t dust_data<basic>(cpp11::list user) {
  typedef typename basic::real_t real_t;
  basic::init_t internal;
  internal.initial_D_tot = 0;
  internal.initial_I_ICU_tot = 0;
  internal.initial_N_tot = 0;
  internal.initial_time = 0;
  internal.dt = NA_REAL;
  internal.hosp_transmission = NA_REAL;
  internal.ICU_transmission = NA_REAL;
  internal.n_age_groups = NA_INTEGER;
  internal.s_asympt = NA_INTEGER;
  internal.s_E = NA_INTEGER;
  internal.s_hosp = NA_INTEGER;
  internal.s_ICU = NA_INTEGER;
  internal.s_ILI = NA_INTEGER;
  internal.s_mild = NA_INTEGER;
  internal.s_rec = NA_INTEGER;
  internal.gamma_asympt = 0.10000000000000001;
  internal.gamma_E = 0.10000000000000001;
  internal.gamma_hosp = 0.10000000000000001;
  internal.gamma_ICU = 0.10000000000000001;
  internal.gamma_ILI = 0.10000000000000001;
  internal.gamma_mild = 0.10000000000000001;
  internal.gamma_rec = 0.10000000000000001;
  internal.n_trans_classes = 1;
  std::array <int, 1> dim_beta_step;
  internal.beta_step = user_get_array_variable<real_t, 1>(user, "beta_step", internal.beta_step, dim_beta_step, NA_REAL, NA_REAL);
  internal.dim_beta_step = internal.beta_step.size();
  internal.dt = user_get_scalar<real_t>(user, "dt", internal.dt, NA_REAL, NA_REAL);
  internal.gamma_asympt = user_get_scalar<real_t>(user, "gamma_asympt", internal.gamma_asympt, NA_REAL, NA_REAL);
  internal.gamma_E = user_get_scalar<real_t>(user, "gamma_E", internal.gamma_E, NA_REAL, NA_REAL);
  internal.gamma_hosp = user_get_scalar<real_t>(user, "gamma_hosp", internal.gamma_hosp, NA_REAL, NA_REAL);
  internal.gamma_ICU = user_get_scalar<real_t>(user, "gamma_ICU", internal.gamma_ICU, NA_REAL, NA_REAL);
  internal.gamma_ILI = user_get_scalar<real_t>(user, "gamma_ILI", internal.gamma_ILI, NA_REAL, NA_REAL);
  internal.gamma_mild = user_get_scalar<real_t>(user, "gamma_mild", internal.gamma_mild, NA_REAL, NA_REAL);
  internal.gamma_rec = user_get_scalar<real_t>(user, "gamma_rec", internal.gamma_rec, NA_REAL, NA_REAL);
  internal.hosp_transmission = user_get_scalar<real_t>(user, "hosp_transmission", internal.hosp_transmission, NA_REAL, NA_REAL);
  internal.ICU_transmission = user_get_scalar<real_t>(user, "ICU_transmission", internal.ICU_transmission, NA_REAL, NA_REAL);
  internal.n_age_groups = user_get_scalar<int>(user, "n_age_groups", internal.n_age_groups, NA_REAL, NA_REAL);
  internal.n_trans_classes = user_get_scalar<int>(user, "n_trans_classes", internal.n_trans_classes, NA_REAL, NA_REAL);
  internal.s_asympt = user_get_scalar<int>(user, "s_asympt", internal.s_asympt, NA_REAL, NA_REAL);
  internal.s_E = user_get_scalar<int>(user, "s_E", internal.s_E, NA_REAL, NA_REAL);
  internal.s_hosp = user_get_scalar<int>(user, "s_hosp", internal.s_hosp, NA_REAL, NA_REAL);
  internal.s_ICU = user_get_scalar<int>(user, "s_ICU", internal.s_ICU, NA_REAL, NA_REAL);
  internal.s_ILI = user_get_scalar<int>(user, "s_ILI", internal.s_ILI, NA_REAL, NA_REAL);
  internal.s_mild = user_get_scalar<int>(user, "s_mild", internal.s_mild, NA_REAL, NA_REAL);
  internal.s_rec = user_get_scalar<int>(user, "s_rec", internal.s_rec, NA_REAL, NA_REAL);
  internal.dim_aux_EE_1 = internal.n_age_groups;
  internal.dim_aux_EE_2 = internal.s_E;
  internal.dim_aux_EE_3 = internal.n_trans_classes;
  internal.dim_aux_II_asympt_1 = internal.n_age_groups;
  internal.dim_aux_II_asympt_2 = internal.s_asympt;
  internal.dim_aux_II_asympt_3 = internal.n_trans_classes;
  internal.dim_aux_II_hosp_1 = internal.n_age_groups;
  internal.dim_aux_II_hosp_2 = internal.s_hosp;
  internal.dim_aux_II_hosp_3 = internal.n_trans_classes;
  internal.dim_aux_II_ICU_1 = internal.n_age_groups;
  internal.dim_aux_II_ICU_2 = internal.s_ICU;
  internal.dim_aux_II_ICU_3 = internal.n_trans_classes;
  internal.dim_aux_II_ILI_1 = internal.n_age_groups;
  internal.dim_aux_II_ILI_2 = internal.s_ILI;
  internal.dim_aux_II_ILI_3 = internal.n_trans_classes;
  internal.dim_aux_II_mild_1 = internal.n_age_groups;
  internal.dim_aux_II_mild_2 = internal.s_mild;
  internal.dim_aux_II_mild_3 = internal.n_trans_classes;
  internal.dim_aux_p_bin_1 = internal.n_age_groups;
  internal.dim_aux_p_bin_2 = internal.n_trans_classes;
  internal.dim_aux_R_hosp_1 = internal.n_age_groups;
  internal.dim_aux_R_hosp_2 = internal.s_rec;
  internal.dim_aux_R_hosp_3 = internal.n_trans_classes;
  internal.dim_D = internal.n_age_groups;
  internal.dim_delta_D = internal.n_age_groups;
  internal.dim_delta_E_1 = internal.n_age_groups;
  internal.dim_delta_E_2 = internal.s_E;
  internal.dim_delta_E_3 = internal.n_trans_classes;
  internal.dim_delta_I_asympt_1 = internal.n_age_groups;
  internal.dim_delta_I_asympt_2 = internal.s_asympt;
  internal.dim_delta_I_asympt_3 = internal.n_trans_classes;
  internal.dim_delta_I_hosp_1 = internal.n_age_groups;
  internal.dim_delta_I_hosp_2 = internal.s_hosp;
  internal.dim_delta_I_hosp_3 = internal.n_trans_classes;
  internal.dim_delta_I_ICU_1 = internal.n_age_groups;
  internal.dim_delta_I_ICU_2 = internal.s_ICU;
  internal.dim_delta_I_ICU_3 = internal.n_trans_classes;
  internal.dim_delta_I_ILI_1 = internal.n_age_groups;
  internal.dim_delta_I_ILI_2 = internal.s_ILI;
  internal.dim_delta_I_ILI_3 = internal.n_trans_classes;
  internal.dim_delta_I_mild_1 = internal.n_age_groups;
  internal.dim_delta_I_mild_2 = internal.s_mild;
  internal.dim_delta_I_mild_3 = internal.n_trans_classes;
  internal.dim_delta_R = internal.n_age_groups;
  internal.dim_delta_R_hosp_1 = internal.n_age_groups;
  internal.dim_delta_R_hosp_2 = internal.s_rec;
  internal.dim_delta_R_hosp_3 = internal.n_trans_classes;
  internal.dim_E_1 = internal.n_age_groups;
  internal.dim_E_2 = internal.s_E;
  internal.dim_E_3 = internal.n_trans_classes;
  internal.dim_I_asympt_1 = internal.n_age_groups;
  internal.dim_I_asympt_2 = internal.s_asympt;
  internal.dim_I_asympt_3 = internal.n_trans_classes;
  internal.dim_I_hosp_1 = internal.n_age_groups;
  internal.dim_I_hosp_2 = internal.s_hosp;
  internal.dim_I_hosp_3 = internal.n_trans_classes;
  internal.dim_I_ICU_1 = internal.n_age_groups;
  internal.dim_I_ICU_2 = internal.s_ICU;
  internal.dim_I_ICU_3 = internal.n_trans_classes;
  internal.dim_I_ILI_1 = internal.n_age_groups;
  internal.dim_I_ILI_2 = internal.s_ILI;
  internal.dim_I_ILI_3 = internal.n_trans_classes;
  internal.dim_I_mild_1 = internal.n_age_groups;
  internal.dim_I_mild_2 = internal.s_mild;
  internal.dim_I_mild_3 = internal.n_trans_classes;
  internal.dim_I_with_diff_trans_1 = internal.n_age_groups;
  internal.dim_I_with_diff_trans_2 = internal.n_trans_classes;
  internal.dim_lambda = internal.n_age_groups;
  internal.dim_m_1 = internal.n_age_groups;
  internal.dim_m_2 = internal.n_age_groups;
  internal.dim_n_death_hosp_1 = internal.n_age_groups;
  internal.dim_n_death_hosp_2 = internal.n_trans_classes;
  internal.dim_n_EE_1 = internal.n_age_groups;
  internal.dim_n_EE_2 = internal.s_E;
  internal.dim_n_EE_3 = internal.n_trans_classes;
  internal.dim_n_EI_asympt_1 = internal.n_age_groups;
  internal.dim_n_EI_asympt_2 = internal.n_trans_classes;
  internal.dim_n_EI_ILI_1 = internal.n_age_groups;
  internal.dim_n_EI_ILI_2 = internal.n_trans_classes;
  internal.dim_n_EI_mild_1 = internal.n_age_groups;
  internal.dim_n_EI_mild_2 = internal.n_trans_classes;
  internal.dim_n_hosp_to_ICU_1 = internal.n_age_groups;
  internal.dim_n_hosp_to_ICU_2 = internal.n_trans_classes;
  internal.dim_n_ICU_to_R_hosp_1 = internal.n_age_groups;
  internal.dim_n_ICU_to_R_hosp_2 = internal.n_trans_classes;
  internal.dim_n_II_asympt_1 = internal.n_age_groups;
  internal.dim_n_II_asympt_2 = internal.s_asympt;
  internal.dim_n_II_asympt_3 = internal.n_trans_classes;
  internal.dim_n_II_hosp_1 = internal.n_age_groups;
  internal.dim_n_II_hosp_2 = internal.s_hosp;
  internal.dim_n_II_hosp_3 = internal.n_trans_classes;
  internal.dim_n_II_ICU_1 = internal.n_age_groups;
  internal.dim_n_II_ICU_2 = internal.s_ICU;
  internal.dim_n_II_ICU_3 = internal.n_trans_classes;
  internal.dim_n_II_ILI_1 = internal.n_age_groups;
  internal.dim_n_II_ILI_2 = internal.s_ILI;
  internal.dim_n_II_ILI_3 = internal.n_trans_classes;
  internal.dim_n_II_mild_1 = internal.n_age_groups;
  internal.dim_n_II_mild_2 = internal.s_mild;
  internal.dim_n_II_mild_3 = internal.n_trans_classes;
  internal.dim_n_ILI_to_hosp_1 = internal.n_age_groups;
  internal.dim_n_ILI_to_hosp_2 = internal.n_trans_classes;
  internal.dim_n_R_hosp_1 = internal.n_age_groups;
  internal.dim_n_R_hosp_2 = internal.s_rec;
  internal.dim_n_R_hosp_3 = internal.n_trans_classes;
  internal.dim_n_SE = internal.n_age_groups;
  internal.dim_new_D = internal.n_age_groups;
  internal.dim_new_I_ICU_1 = internal.n_age_groups;
  internal.dim_new_I_ICU_2 = internal.s_ICU;
  internal.dim_new_I_ICU_3 = internal.n_trans_classes;
  internal.dim_p_asympt = internal.n_age_groups;
  internal.dim_p_death_hosp = internal.n_age_groups;
  internal.dim_p_recov_hosp = internal.n_age_groups;
  internal.dim_p_recov_ICU = internal.n_age_groups;
  internal.dim_p_recov_ILI = internal.n_age_groups;
  internal.dim_p_SE = internal.n_age_groups;
  internal.dim_p_sympt_ILI = internal.n_age_groups;
  internal.dim_R = internal.n_age_groups;
  internal.dim_R_hosp_1 = internal.n_age_groups;
  internal.dim_R_hosp_2 = internal.s_rec;
  internal.dim_R_hosp_3 = internal.n_trans_classes;
  internal.dim_S = internal.n_age_groups;
  internal.dim_s_ij_1 = internal.n_age_groups;
  internal.dim_s_ij_2 = internal.n_age_groups;
  internal.dim_trans_increase_1 = internal.n_age_groups;
  internal.dim_trans_increase_2 = internal.n_trans_classes;
  internal.dim_trans_profile_1 = internal.n_age_groups;
  internal.dim_trans_profile_2 = internal.n_trans_classes;
  internal.initial_beta_out = internal.beta_step[0];
  internal.p_EE = 1 - std::exp(- internal.gamma_E * internal.dt);
  internal.p_II_asympt = 1 - std::exp(- internal.gamma_asympt * internal.dt);
  internal.p_II_hosp = 1 - std::exp(- internal.gamma_hosp * internal.dt);
  internal.p_II_ICU = 1 - std::exp(- internal.gamma_ICU * internal.dt);
  internal.p_II_ILI = 1 - std::exp(- internal.gamma_ILI * internal.dt);
  internal.p_II_mild = 1 - std::exp(- internal.gamma_mild * internal.dt);
  internal.p_R_hosp = 1 - std::exp(- internal.gamma_rec * internal.dt);
  internal.delta_D = std::vector<real_t>(internal.dim_delta_D);
  internal.delta_R = std::vector<real_t>(internal.dim_delta_R);
  internal.initial_D = std::vector<real_t>(internal.dim_D);
  internal.initial_R = std::vector<real_t>(internal.dim_R);
  internal.initial_S = std::vector<real_t>(internal.dim_S);
  internal.lambda = std::vector<real_t>(internal.dim_lambda);
  internal.n_SE = std::vector<real_t>(internal.dim_n_SE);
  internal.new_D = std::vector<real_t>(internal.dim_new_D);
  internal.p_SE = std::vector<real_t>(internal.dim_p_SE);
  internal.dim_aux_EE = internal.dim_aux_EE_1 * internal.dim_aux_EE_2 * internal.dim_aux_EE_3;
  internal.dim_aux_EE_12 = internal.dim_aux_EE_1 * internal.dim_aux_EE_2;
  internal.dim_aux_II_asympt = internal.dim_aux_II_asympt_1 * internal.dim_aux_II_asympt_2 * internal.dim_aux_II_asympt_3;
  internal.dim_aux_II_asympt_12 = internal.dim_aux_II_asympt_1 * internal.dim_aux_II_asympt_2;
  internal.dim_aux_II_hosp = internal.dim_aux_II_hosp_1 * internal.dim_aux_II_hosp_2 * internal.dim_aux_II_hosp_3;
  internal.dim_aux_II_hosp_12 = internal.dim_aux_II_hosp_1 * internal.dim_aux_II_hosp_2;
  internal.dim_aux_II_ICU = internal.dim_aux_II_ICU_1 * internal.dim_aux_II_ICU_2 * internal.dim_aux_II_ICU_3;
  internal.dim_aux_II_ICU_12 = internal.dim_aux_II_ICU_1 * internal.dim_aux_II_ICU_2;
  internal.dim_aux_II_ILI = internal.dim_aux_II_ILI_1 * internal.dim_aux_II_ILI_2 * internal.dim_aux_II_ILI_3;
  internal.dim_aux_II_ILI_12 = internal.dim_aux_II_ILI_1 * internal.dim_aux_II_ILI_2;
  internal.dim_aux_II_mild = internal.dim_aux_II_mild_1 * internal.dim_aux_II_mild_2 * internal.dim_aux_II_mild_3;
  internal.dim_aux_II_mild_12 = internal.dim_aux_II_mild_1 * internal.dim_aux_II_mild_2;
  internal.dim_aux_p_bin = internal.dim_aux_p_bin_1 * internal.dim_aux_p_bin_2;
  internal.dim_aux_R_hosp = internal.dim_aux_R_hosp_1 * internal.dim_aux_R_hosp_2 * internal.dim_aux_R_hosp_3;
  internal.dim_aux_R_hosp_12 = internal.dim_aux_R_hosp_1 * internal.dim_aux_R_hosp_2;
  internal.dim_delta_E = internal.dim_delta_E_1 * internal.dim_delta_E_2 * internal.dim_delta_E_3;
  internal.dim_delta_E_12 = internal.dim_delta_E_1 * internal.dim_delta_E_2;
  internal.dim_delta_I_asympt = internal.dim_delta_I_asympt_1 * internal.dim_delta_I_asympt_2 * internal.dim_delta_I_asympt_3;
  internal.dim_delta_I_asympt_12 = internal.dim_delta_I_asympt_1 * internal.dim_delta_I_asympt_2;
  internal.dim_delta_I_hosp = internal.dim_delta_I_hosp_1 * internal.dim_delta_I_hosp_2 * internal.dim_delta_I_hosp_3;
  internal.dim_delta_I_hosp_12 = internal.dim_delta_I_hosp_1 * internal.dim_delta_I_hosp_2;
  internal.dim_delta_I_ICU = internal.dim_delta_I_ICU_1 * internal.dim_delta_I_ICU_2 * internal.dim_delta_I_ICU_3;
  internal.dim_delta_I_ICU_12 = internal.dim_delta_I_ICU_1 * internal.dim_delta_I_ICU_2;
  internal.dim_delta_I_ILI = internal.dim_delta_I_ILI_1 * internal.dim_delta_I_ILI_2 * internal.dim_delta_I_ILI_3;
  internal.dim_delta_I_ILI_12 = internal.dim_delta_I_ILI_1 * internal.dim_delta_I_ILI_2;
  internal.dim_delta_I_mild = internal.dim_delta_I_mild_1 * internal.dim_delta_I_mild_2 * internal.dim_delta_I_mild_3;
  internal.dim_delta_I_mild_12 = internal.dim_delta_I_mild_1 * internal.dim_delta_I_mild_2;
  internal.dim_delta_R_hosp = internal.dim_delta_R_hosp_1 * internal.dim_delta_R_hosp_2 * internal.dim_delta_R_hosp_3;
  internal.dim_delta_R_hosp_12 = internal.dim_delta_R_hosp_1 * internal.dim_delta_R_hosp_2;
  internal.dim_E = internal.dim_E_1 * internal.dim_E_2 * internal.dim_E_3;
  internal.dim_E_12 = internal.dim_E_1 * internal.dim_E_2;
  internal.dim_I_asympt = internal.dim_I_asympt_1 * internal.dim_I_asympt_2 * internal.dim_I_asympt_3;
  internal.dim_I_asympt_12 = internal.dim_I_asympt_1 * internal.dim_I_asympt_2;
  internal.dim_I_hosp = internal.dim_I_hosp_1 * internal.dim_I_hosp_2 * internal.dim_I_hosp_3;
  internal.dim_I_hosp_12 = internal.dim_I_hosp_1 * internal.dim_I_hosp_2;
  internal.dim_I_ICU = internal.dim_I_ICU_1 * internal.dim_I_ICU_2 * internal.dim_I_ICU_3;
  internal.dim_I_ICU_12 = internal.dim_I_ICU_1 * internal.dim_I_ICU_2;
  internal.dim_I_ILI = internal.dim_I_ILI_1 * internal.dim_I_ILI_2 * internal.dim_I_ILI_3;
  internal.dim_I_ILI_12 = internal.dim_I_ILI_1 * internal.dim_I_ILI_2;
  internal.dim_I_mild = internal.dim_I_mild_1 * internal.dim_I_mild_2 * internal.dim_I_mild_3;
  internal.dim_I_mild_12 = internal.dim_I_mild_1 * internal.dim_I_mild_2;
  internal.dim_I_with_diff_trans = internal.dim_I_with_diff_trans_1 * internal.dim_I_with_diff_trans_2;
  internal.dim_m = internal.dim_m_1 * internal.dim_m_2;
  internal.dim_n_death_hosp = internal.dim_n_death_hosp_1 * internal.dim_n_death_hosp_2;
  internal.dim_n_EE = internal.dim_n_EE_1 * internal.dim_n_EE_2 * internal.dim_n_EE_3;
  internal.dim_n_EE_12 = internal.dim_n_EE_1 * internal.dim_n_EE_2;
  internal.dim_n_EI_asympt = internal.dim_n_EI_asympt_1 * internal.dim_n_EI_asympt_2;
  internal.dim_n_EI_ILI = internal.dim_n_EI_ILI_1 * internal.dim_n_EI_ILI_2;
  internal.dim_n_EI_mild = internal.dim_n_EI_mild_1 * internal.dim_n_EI_mild_2;
  internal.dim_n_hosp_to_ICU = internal.dim_n_hosp_to_ICU_1 * internal.dim_n_hosp_to_ICU_2;
  internal.dim_n_ICU_to_R_hosp = internal.dim_n_ICU_to_R_hosp_1 * internal.dim_n_ICU_to_R_hosp_2;
  internal.dim_n_II_asympt = internal.dim_n_II_asympt_1 * internal.dim_n_II_asympt_2 * internal.dim_n_II_asympt_3;
  internal.dim_n_II_asympt_12 = internal.dim_n_II_asympt_1 * internal.dim_n_II_asympt_2;
  internal.dim_n_II_hosp = internal.dim_n_II_hosp_1 * internal.dim_n_II_hosp_2 * internal.dim_n_II_hosp_3;
  internal.dim_n_II_hosp_12 = internal.dim_n_II_hosp_1 * internal.dim_n_II_hosp_2;
  internal.dim_n_II_ICU = internal.dim_n_II_ICU_1 * internal.dim_n_II_ICU_2 * internal.dim_n_II_ICU_3;
  internal.dim_n_II_ICU_12 = internal.dim_n_II_ICU_1 * internal.dim_n_II_ICU_2;
  internal.dim_n_II_ILI = internal.dim_n_II_ILI_1 * internal.dim_n_II_ILI_2 * internal.dim_n_II_ILI_3;
  internal.dim_n_II_ILI_12 = internal.dim_n_II_ILI_1 * internal.dim_n_II_ILI_2;
  internal.dim_n_II_mild = internal.dim_n_II_mild_1 * internal.dim_n_II_mild_2 * internal.dim_n_II_mild_3;
  internal.dim_n_II_mild_12 = internal.dim_n_II_mild_1 * internal.dim_n_II_mild_2;
  internal.dim_n_ILI_to_hosp = internal.dim_n_ILI_to_hosp_1 * internal.dim_n_ILI_to_hosp_2;
  internal.dim_n_R_hosp = internal.dim_n_R_hosp_1 * internal.dim_n_R_hosp_2 * internal.dim_n_R_hosp_3;
  internal.dim_n_R_hosp_12 = internal.dim_n_R_hosp_1 * internal.dim_n_R_hosp_2;
  internal.dim_new_I_ICU = internal.dim_new_I_ICU_1 * internal.dim_new_I_ICU_2 * internal.dim_new_I_ICU_3;
  internal.dim_new_I_ICU_12 = internal.dim_new_I_ICU_1 * internal.dim_new_I_ICU_2;
  internal.dim_R_hosp = internal.dim_R_hosp_1 * internal.dim_R_hosp_2 * internal.dim_R_hosp_3;
  internal.dim_R_hosp_12 = internal.dim_R_hosp_1 * internal.dim_R_hosp_2;
  internal.dim_s_ij = internal.dim_s_ij_1 * internal.dim_s_ij_2;
  internal.dim_trans_increase = internal.dim_trans_increase_1 * internal.dim_trans_increase_2;
  internal.dim_trans_profile = internal.dim_trans_profile_1 * internal.dim_trans_profile_2;
  for (int i = 1; i <= internal.dim_D; ++i) {
    internal.initial_D[i - 1] = 0;
  }
  for (int i = 1; i <= internal.dim_R; ++i) {
    internal.initial_R[i - 1] = 0;
  }
  for (int i = 1; i <= internal.dim_S; ++i) {
    internal.initial_S[i - 1] = 0;
  }
  internal.offset_variable_D = 5 + internal.dim_S + internal.dim_R;
  internal.offset_variable_E = 5 + internal.dim_S + internal.dim_R + internal.dim_D;
  internal.offset_variable_R = 5 + internal.dim_S;
  internal.p_asympt = user_get_array_fixed<real_t, 1>(user, "p_asympt", internal.p_asympt, {internal.dim_p_asympt}, NA_REAL, NA_REAL);
  internal.p_death_hosp = user_get_array_fixed<real_t, 1>(user, "p_death_hosp", internal.p_death_hosp, {internal.dim_p_death_hosp}, NA_REAL, NA_REAL);
  internal.p_recov_hosp = user_get_array_fixed<real_t, 1>(user, "p_recov_hosp", internal.p_recov_hosp, {internal.dim_p_recov_hosp}, NA_REAL, NA_REAL);
  internal.p_recov_ICU = user_get_array_fixed<real_t, 1>(user, "p_recov_ICU", internal.p_recov_ICU, {internal.dim_p_recov_ICU}, NA_REAL, NA_REAL);
  internal.p_recov_ILI = user_get_array_fixed<real_t, 1>(user, "p_recov_ILI", internal.p_recov_ILI, {internal.dim_p_recov_ILI}, NA_REAL, NA_REAL);
  internal.p_sympt_ILI = user_get_array_fixed<real_t, 1>(user, "p_sympt_ILI", internal.p_sympt_ILI, {internal.dim_p_sympt_ILI}, NA_REAL, NA_REAL);
  internal.aux_EE = std::vector<real_t>(internal.dim_aux_EE);
  internal.aux_II_asympt = std::vector<real_t>(internal.dim_aux_II_asympt);
  internal.aux_II_hosp = std::vector<real_t>(internal.dim_aux_II_hosp);
  internal.aux_II_ICU = std::vector<real_t>(internal.dim_aux_II_ICU);
  internal.aux_II_ILI = std::vector<real_t>(internal.dim_aux_II_ILI);
  internal.aux_II_mild = std::vector<real_t>(internal.dim_aux_II_mild);
  internal.aux_p_bin = std::vector<real_t>(internal.dim_aux_p_bin);
  internal.aux_R_hosp = std::vector<real_t>(internal.dim_aux_R_hosp);
  internal.delta_E = std::vector<real_t>(internal.dim_delta_E);
  internal.delta_I_asympt = std::vector<real_t>(internal.dim_delta_I_asympt);
  internal.delta_I_hosp = std::vector<real_t>(internal.dim_delta_I_hosp);
  internal.delta_I_ICU = std::vector<real_t>(internal.dim_delta_I_ICU);
  internal.delta_I_ILI = std::vector<real_t>(internal.dim_delta_I_ILI);
  internal.delta_I_mild = std::vector<real_t>(internal.dim_delta_I_mild);
  internal.delta_R_hosp = std::vector<real_t>(internal.dim_delta_R_hosp);
  internal.I_with_diff_trans = std::vector<real_t>(internal.dim_I_with_diff_trans);
  internal.initial_E = std::vector<real_t>(internal.dim_E);
  internal.initial_I_asympt = std::vector<real_t>(internal.dim_I_asympt);
  internal.initial_I_hosp = std::vector<real_t>(internal.dim_I_hosp);
  internal.initial_I_ICU = std::vector<real_t>(internal.dim_I_ICU);
  internal.initial_I_ILI = std::vector<real_t>(internal.dim_I_ILI);
  internal.initial_I_mild = std::vector<real_t>(internal.dim_I_mild);
  internal.initial_R_hosp = std::vector<real_t>(internal.dim_R_hosp);
  internal.n_death_hosp = std::vector<real_t>(internal.dim_n_death_hosp);
  internal.n_EE = std::vector<real_t>(internal.dim_n_EE);
  internal.n_EI_asympt = std::vector<real_t>(internal.dim_n_EI_asympt);
  internal.n_EI_ILI = std::vector<real_t>(internal.dim_n_EI_ILI);
  internal.n_EI_mild = std::vector<real_t>(internal.dim_n_EI_mild);
  internal.n_hosp_to_ICU = std::vector<real_t>(internal.dim_n_hosp_to_ICU);
  internal.n_ICU_to_R_hosp = std::vector<real_t>(internal.dim_n_ICU_to_R_hosp);
  internal.n_II_asympt = std::vector<real_t>(internal.dim_n_II_asympt);
  internal.n_II_hosp = std::vector<real_t>(internal.dim_n_II_hosp);
  internal.n_II_ICU = std::vector<real_t>(internal.dim_n_II_ICU);
  internal.n_II_ILI = std::vector<real_t>(internal.dim_n_II_ILI);
  internal.n_II_mild = std::vector<real_t>(internal.dim_n_II_mild);
  internal.n_ILI_to_hosp = std::vector<real_t>(internal.dim_n_ILI_to_hosp);
  internal.n_R_hosp = std::vector<real_t>(internal.dim_n_R_hosp);
  internal.new_I_ICU = std::vector<real_t>(internal.dim_new_I_ICU);
  internal.s_ij = std::vector<real_t>(internal.dim_s_ij);
  internal.trans_increase = std::vector<real_t>(internal.dim_trans_increase);
  internal.trans_profile = std::vector<real_t>(internal.dim_trans_profile);
  for (int i = 1; i <= internal.dim_E_1; ++i) {
    for (int j = 1; j <= internal.dim_E_2; ++j) {
      for (int k = 1; k <= internal.dim_E_3; ++k) {
        internal.initial_E[i - 1 + internal.dim_E_1 * (j - 1) + internal.dim_E_12 * (k - 1)] = 0;
      }
    }
  }
  for (int i = 1; i <= internal.dim_I_asympt_1; ++i) {
    for (int j = 1; j <= internal.dim_I_asympt_2; ++j) {
      for (int k = 1; k <= internal.dim_I_asympt_3; ++k) {
        internal.initial_I_asympt[i - 1 + internal.dim_I_asympt_1 * (j - 1) + internal.dim_I_asympt_12 * (k - 1)] = 0;
      }
    }
  }
  for (int i = 1; i <= internal.dim_I_hosp_1; ++i) {
    for (int j = 1; j <= internal.dim_I_hosp_2; ++j) {
      for (int k = 1; k <= internal.dim_I_hosp_3; ++k) {
        internal.initial_I_hosp[i - 1 + internal.dim_I_hosp_1 * (j - 1) + internal.dim_I_hosp_12 * (k - 1)] = 0;
      }
    }
  }
  for (int i = 1; i <= internal.dim_I_ICU_1; ++i) {
    for (int j = 1; j <= internal.dim_I_ICU_2; ++j) {
      for (int k = 1; k <= internal.dim_I_ICU_3; ++k) {
        internal.initial_I_ICU[i - 1 + internal.dim_I_ICU_1 * (j - 1) + internal.dim_I_ICU_12 * (k - 1)] = 0;
      }
    }
  }
  for (int i = 1; i <= internal.dim_I_ILI_1; ++i) {
    for (int j = 1; j <= internal.dim_I_ILI_2; ++j) {
      for (int k = 1; k <= internal.dim_I_ILI_3; ++k) {
        internal.initial_I_ILI[i - 1 + internal.dim_I_ILI_1 * (j - 1) + internal.dim_I_ILI_12 * (k - 1)] = 0;
      }
    }
  }
  for (int i = 1; i <= internal.dim_I_mild_1; ++i) {
    for (int j = 1; j <= internal.dim_I_mild_2; ++j) {
      for (int k = 1; k <= internal.dim_I_mild_3; ++k) {
        internal.initial_I_mild[i - 1 + internal.dim_I_mild_1 * (j - 1) + internal.dim_I_mild_12 * (k - 1)] = 0;
      }
    }
  }
  for (int i = 1; i <= internal.dim_R_hosp_1; ++i) {
    for (int j = 1; j <= internal.dim_R_hosp_2; ++j) {
      for (int k = 1; k <= internal.dim_R_hosp_3; ++k) {
        internal.initial_R_hosp[i - 1 + internal.dim_R_hosp_1 * (j - 1) + internal.dim_R_hosp_12 * (k - 1)] = 0;
      }
    }
  }
  internal.m = user_get_array_fixed<real_t, 2>(user, "m", internal.m, {internal.dim_m_1, internal.dim_m_2}, NA_REAL, NA_REAL);
  internal.offset_variable_I_asympt = 5 + internal.dim_S + internal.dim_R + internal.dim_D + internal.dim_E;
  internal.offset_variable_I_hosp = 5 + internal.dim_S + internal.dim_R + internal.dim_D + internal.dim_E + internal.dim_I_asympt + internal.dim_I_mild + internal.dim_I_ILI;
  internal.offset_variable_I_ICU = 5 + internal.dim_S + internal.dim_R + internal.dim_D + internal.dim_E + internal.dim_I_asympt + internal.dim_I_mild + internal.dim_I_ILI + internal.dim_I_hosp;
  internal.offset_variable_I_ILI = 5 + internal.dim_S + internal.dim_R + internal.dim_D + internal.dim_E + internal.dim_I_asympt + internal.dim_I_mild;
  internal.offset_variable_I_mild = 5 + internal.dim_S + internal.dim_R + internal.dim_D + internal.dim_E + internal.dim_I_asympt;
  internal.offset_variable_R_hosp = 5 + internal.dim_S + internal.dim_R + internal.dim_D + internal.dim_E + internal.dim_I_asympt + internal.dim_I_mild + internal.dim_I_ILI + internal.dim_I_hosp + internal.dim_I_ICU;
  for (int i = 1; i <= internal.dim_trans_increase_1; ++i) {
    for (int j = 1; j <= internal.dim_trans_increase_2; ++j) {
      internal.trans_increase[i - 1 + internal.dim_trans_increase_1 * (j - 1)] = 1;
    }
  }
  for (int i = 1; i <= internal.dim_trans_profile_1; ++i) {
    for (int j = 1; j <= internal.dim_trans_profile_2; ++j) {
      internal.trans_profile[i - 1 + internal.dim_trans_profile_1 * (j - 1)] = 1;
    }
  }
  for (int i = 1; i <= internal.dim_aux_p_bin_1; ++i) {
    int j = 1;
    internal.aux_p_bin[i - 1 + internal.dim_aux_p_bin_1 * (j - 1)] = internal.trans_profile[internal.dim_trans_profile_1 * 0 + i - 1];
  }
  for (int i = 1; i <= internal.dim_aux_p_bin_1; ++i) {
    for (int j = 2; j <= (internal.n_trans_classes - 1); ++j) {
      internal.aux_p_bin[i - 1 + internal.dim_aux_p_bin_1 * (j - 1)] = internal.trans_profile[internal.dim_trans_profile_1 * (j - 1) + i - 1] / (real_t) odin_sum2(internal.trans_profile.data(), i - 1, i, j - 1, internal.n_trans_classes, internal.dim_trans_profile_1);
    }
  }
  return internal;
}
template <>
cpp11::sexp dust_info<basic>(const basic::init_t& internal) {
  cpp11::writable::strings nms({"time", "N_tot", "I_ICU_tot", "D_tot", "beta_out", "S", "R", "D", "E", "I_asympt", "I_mild", "I_ILI", "I_hosp", "I_ICU", "R_hosp"});
  cpp11::writable::list dim(15);
  dim[0] = cpp11::writable::integers({1});
  dim[1] = cpp11::writable::integers({1});
  dim[2] = cpp11::writable::integers({1});
  dim[3] = cpp11::writable::integers({1});
  dim[4] = cpp11::writable::integers({1});
  dim[5] = cpp11::writable::integers({internal.dim_S});
  dim[6] = cpp11::writable::integers({internal.dim_R});
  dim[7] = cpp11::writable::integers({internal.dim_D});
  dim[8] = cpp11::writable::integers({internal.dim_E_1, internal.dim_E_2, internal.dim_E_3});
  dim[9] = cpp11::writable::integers({internal.dim_I_asympt_1, internal.dim_I_asympt_2, internal.dim_I_asympt_3});
  dim[10] = cpp11::writable::integers({internal.dim_I_mild_1, internal.dim_I_mild_2, internal.dim_I_mild_3});
  dim[11] = cpp11::writable::integers({internal.dim_I_ILI_1, internal.dim_I_ILI_2, internal.dim_I_ILI_3});
  dim[12] = cpp11::writable::integers({internal.dim_I_hosp_1, internal.dim_I_hosp_2, internal.dim_I_hosp_3});
  dim[13] = cpp11::writable::integers({internal.dim_I_ICU_1, internal.dim_I_ICU_2, internal.dim_I_ICU_3});
  dim[14] = cpp11::writable::integers({internal.dim_R_hosp_1, internal.dim_R_hosp_2, internal.dim_R_hosp_3});
  dim.names() = nms;
  cpp11::writable::list index(15);
  index[0] = cpp11::writable::integers({1});
  index[1] = cpp11::writable::integers({2});
  index[2] = cpp11::writable::integers({3});
  index[3] = cpp11::writable::integers({4});
  index[4] = cpp11::writable::integers({5});
  index[5] = integer_sequence(6, internal.dim_S);
  index[6] = integer_sequence(internal.offset_variable_R + 1, internal.dim_R);
  index[7] = integer_sequence(internal.offset_variable_D + 1, internal.dim_D);
  index[8] = integer_sequence(internal.offset_variable_E + 1, internal.dim_E);
  index[9] = integer_sequence(internal.offset_variable_I_asympt + 1, internal.dim_I_asympt);
  index[10] = integer_sequence(internal.offset_variable_I_mild + 1, internal.dim_I_mild);
  index[11] = integer_sequence(internal.offset_variable_I_ILI + 1, internal.dim_I_ILI);
  index[12] = integer_sequence(internal.offset_variable_I_hosp + 1, internal.dim_I_hosp);
  index[13] = integer_sequence(internal.offset_variable_I_ICU + 1, internal.dim_I_ICU);
  index[14] = integer_sequence(internal.offset_variable_R_hosp + 1, internal.dim_R_hosp);
  index.names() = nms;
  size_t len = internal.offset_variable_R_hosp + internal.dim_R_hosp;
  using namespace cpp11::literals;
  return cpp11::writable::list({
           "dim"_nm = dim,
           "len"_nm = len,
           "index"_nm = index});
}

[[cpp11::register]]
SEXP dust_basic_alloc(cpp11::list r_data, size_t step, size_t n_particles,
                size_t n_threads, cpp11::sexp r_seed) {
  return dust_alloc<basic>(r_data, step, n_particles, n_threads, r_seed);
}

[[cpp11::register]]
SEXP dust_basic_run(SEXP ptr, size_t step_end) {
  return dust_run<basic>(ptr, step_end);
}

[[cpp11::register]]
SEXP dust_basic_set_index(SEXP ptr, cpp11::sexp r_index) {
  dust_set_index<basic>(ptr, r_index);
  return R_NilValue;
}

[[cpp11::register]]
SEXP dust_basic_set_state(SEXP ptr, SEXP r_state, SEXP r_step) {
  dust_set_state<basic>(ptr, r_state, r_step);
  return R_NilValue;
}

[[cpp11::register]]
SEXP dust_basic_reset(SEXP ptr, cpp11::list r_data, size_t step) {
  return dust_reset<basic>(ptr, r_data, step);
}

[[cpp11::register]]
SEXP dust_basic_state(SEXP ptr, SEXP r_index) {
  return dust_state<basic>(ptr, r_index);
}

[[cpp11::register]]
size_t dust_basic_step(SEXP ptr) {
  return dust_step<basic>(ptr);
}

[[cpp11::register]]
void dust_basic_reorder(SEXP ptr, cpp11::sexp r_index) {
  return dust_reorder<basic>(ptr, r_index);
}

[[cpp11::register]]
SEXP dust_basic_rng_state(SEXP ptr, bool first_only) {
  return dust_rng_state<basic>(ptr, first_only);
}

[[cpp11::register]]
SEXP dust_basic_set_rng_state(SEXP ptr, cpp11::raws rng_state) {
  dust_set_rng_state<basic>(ptr, rng_state);
  return R_NilValue;
}

[[cpp11::register]]
SEXP dust_basic_simulate(cpp11::sexp r_steps,
                            cpp11::list r_data,
                            cpp11::doubles_matrix r_state,
                            cpp11::sexp r_index,
                            const size_t n_threads,
                            cpp11::sexp r_seed) {
  return dust_simulate<basic>(r_steps, r_data, r_state, r_index,
                                 n_threads, r_seed);
}

[[cpp11::register]]
bool dust_basic_has_openmp() {
#ifdef _OPENMP
  return true;
#else
  return false;
#endif
}
