// Generated by dust (version 0.11.16) - do not edit
#include <cpp11.hpp>

[[cpp11::register]]
cpp11::sexp dust_basic_capabilities();

[[cpp11::register]]
cpp11::sexp dust_basic_gpu_info();
[[cpp11::register]]
SEXP dust_cpu_basic_alloc(cpp11::list r_pars, bool pars_multi, size_t step,
                         cpp11::sexp r_n_particles, size_t n_threads,
                         cpp11::sexp r_seed, bool deterministic,
                         cpp11::sexp gpu_config);

[[cpp11::register]]
SEXP dust_cpu_basic_run(SEXP ptr, size_t step_end);

[[cpp11::register]]
SEXP dust_cpu_basic_simulate(SEXP ptr, cpp11::sexp step_end);

[[cpp11::register]]
SEXP dust_cpu_basic_set_index(SEXP ptr, cpp11::sexp r_index);

[[cpp11::register]]
SEXP dust_cpu_basic_update_state(SEXP ptr, SEXP r_pars, SEXP r_state,
                                SEXP r_step, SEXP r_set_initial_state);

[[cpp11::register]]
SEXP dust_cpu_basic_state(SEXP ptr, SEXP r_index);

[[cpp11::register]]
size_t dust_cpu_basic_step(SEXP ptr);

[[cpp11::register]]
void dust_cpu_basic_reorder(SEXP ptr, cpp11::sexp r_index);

[[cpp11::register]]
SEXP dust_cpu_basic_resample(SEXP ptr, cpp11::doubles r_weights);

[[cpp11::register]]
SEXP dust_cpu_basic_rng_state(SEXP ptr, bool first_only, bool last_only);

[[cpp11::register]]
SEXP dust_cpu_basic_set_rng_state(SEXP ptr, cpp11::raws rng_state);

[[cpp11::register]]
SEXP dust_cpu_basic_set_data(SEXP ptr, cpp11::list data);

[[cpp11::register]]
SEXP dust_cpu_basic_compare_data(SEXP ptr);

[[cpp11::register]]
SEXP dust_cpu_basic_filter(SEXP ptr, bool save_trajectories,
                          cpp11::sexp step_snapshot);

[[cpp11::register]]
void dust_cpu_basic_set_n_threads(SEXP ptr, int n_threads);

[[cpp11::register]]
int dust_cpu_basic_n_state(SEXP ptr);
#include <dust/r/dust.hpp>

// Generated by odin.dust (version 0.2.14) - do not edit
template <typename real_type, typename container>
__host__ __device__ real_type odin_sum1(const container x, size_t from, size_t to);
template <typename real_type, typename container>
__host__ __device__ real_type odin_sum2(const container x, int from_i, int to_i, int from_j, int to_j, int dim_x_1);
template <typename real_type, typename container>
__host__ __device__ real_type odin_sum3(const container x, int from_i, int to_i, int from_j, int to_j, int from_k, int to_k, int dim_x_1, int dim_x_12);
template <typename real_type, typename T, typename U>
__host__ __device__ real_type fmodr(T x, U y) {
  real_type tmp = std::fmod(static_cast<real_type>(x),
                            static_cast<real_type>(y));
  if (tmp * y < 0) {
    tmp += y;
  }
  return tmp;
}

// These exist to support the model on the gpu, as in C++14 std::min
// and std::max are constexpr and error without --expt-relaxed-constexpr
template <typename T>
__host__ __device__ T odin_min(T x, T y) {
  return x < y ? x : y;
}

template <typename T>
__host__ __device__ T odin_max(T x, T y) {
  return x > y ? x : y;
}
template <typename real_type, typename rng_state_type>
__host__ __device__
real_type ll_nbinom(real_type data, real_type model, real_type kappa,
                    real_type exp_noise,
                    rng_state_type& rng_state) {
  if (std::isnan(data)) {
    return 0;
  }
  real_type mu = model +
    dust::random::exponential<real_type>(rng_state, exp_noise);
  return dust::density::negative_binomial_mu(data, kappa, mu, true);
}

// [[odin.dust::compare_data(icu = real_type, deaths = real_type)]]
// [[odin.dust::compare_function]]
template <typename T>
typename T::real_type
compare(const typename T::real_type * state,
        const typename T::data_type& data,
        const typename T::internal_type internal,
        std::shared_ptr<const typename T::shared_type> shared,
        typename T::rng_state_type& rng_state) {
  typedef typename T::real_type real_type;
  real_type ll_icu = ll_nbinom(data.icu, shared->phi_ICU * state[2],
                            shared->kappa_ICU, shared->exp_noise,
                            rng_state);
  real_type ll_deaths = ll_nbinom(data.deaths, shared->phi_death * state[4],
                               shared->kappa_death, shared->exp_noise,
                               rng_state);
  return ll_icu + ll_deaths;
}
// [[dust::class(basic)]]
// [[dust::param(ICU_transmission, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(beta_step, has_default = FALSE, default_value = NULL, rank = 1, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(exp_noise, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(hosp_transmission, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(k_A, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(k_C, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(k_E, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(k_ICU, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(k_hosp, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(k_rec, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(kappa_ICU, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(kappa_death, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(m, has_default = FALSE, default_value = NULL, rank = 2, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(n_age_groups, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(p_C, has_default = FALSE, default_value = NULL, rank = 1, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(p_death_hosp, has_default = FALSE, default_value = NULL, rank = 1, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(p_recov_ICU, has_default = FALSE, default_value = NULL, rank = 1, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(p_recov_hosp, has_default = FALSE, default_value = NULL, rank = 1, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(p_recov_sympt, has_default = FALSE, default_value = NULL, rank = 1, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(phi_ICU, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(phi_death, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(seed_step_start, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(seed_value, has_default = FALSE, default_value = NULL, rank = 1, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(steps_per_day, has_default = FALSE, default_value = NULL, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(gamma_A, has_default = TRUE, default_value = 0.1, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(gamma_C, has_default = TRUE, default_value = 0.1, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(gamma_E, has_default = TRUE, default_value = 0.1, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(gamma_ICU, has_default = TRUE, default_value = 0.1, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(gamma_hosp, has_default = TRUE, default_value = 0.1, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(gamma_rec, has_default = TRUE, default_value = 0.1, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
// [[dust::param(n_trans_classes, has_default = TRUE, default_value = 1L, rank = 0, min = -Inf, max = Inf, integer = FALSE)]]
class basic {
public:
  using real_type = double;
  using rng_state_type = dust::random::generator<real_type>;
  struct __align__(16) data_type {
    real_type icu;
    real_type deaths;
  };
  struct shared_type {
    real_type ICU_transmission;
    std::vector<real_type> aux_p_bin;
    std::vector<real_type> beta_step;
    int dim_D;
    int dim_E;
    int dim_E_1;
    int dim_E_12;
    int dim_E_2;
    int dim_E_3;
    int dim_I_A;
    int dim_I_A_1;
    int dim_I_A_12;
    int dim_I_A_2;
    int dim_I_A_3;
    int dim_I_C;
    int dim_I_C_1;
    int dim_I_C_12;
    int dim_I_C_2;
    int dim_I_C_3;
    int dim_I_ICU;
    int dim_I_ICU_1;
    int dim_I_ICU_12;
    int dim_I_ICU_2;
    int dim_I_ICU_3;
    int dim_I_hosp;
    int dim_I_hosp_1;
    int dim_I_hosp_12;
    int dim_I_hosp_2;
    int dim_I_hosp_3;
    int dim_I_with_diff_trans;
    int dim_I_with_diff_trans_1;
    int dim_I_with_diff_trans_2;
    int dim_R;
    int dim_R_hosp;
    int dim_R_hosp_1;
    int dim_R_hosp_12;
    int dim_R_hosp_2;
    int dim_R_hosp_3;
    int dim_S;
    int dim_aux_EE;
    int dim_aux_EE_1;
    int dim_aux_EE_12;
    int dim_aux_EE_2;
    int dim_aux_EE_3;
    int dim_aux_II_A;
    int dim_aux_II_A_1;
    int dim_aux_II_A_12;
    int dim_aux_II_A_2;
    int dim_aux_II_A_3;
    int dim_aux_II_C;
    int dim_aux_II_C_1;
    int dim_aux_II_C_12;
    int dim_aux_II_C_2;
    int dim_aux_II_C_3;
    int dim_aux_II_ICU;
    int dim_aux_II_ICU_1;
    int dim_aux_II_ICU_12;
    int dim_aux_II_ICU_2;
    int dim_aux_II_ICU_3;
    int dim_aux_II_hosp;
    int dim_aux_II_hosp_1;
    int dim_aux_II_hosp_12;
    int dim_aux_II_hosp_2;
    int dim_aux_II_hosp_3;
    int dim_aux_R_hosp;
    int dim_aux_R_hosp_1;
    int dim_aux_R_hosp_12;
    int dim_aux_R_hosp_2;
    int dim_aux_R_hosp_3;
    int dim_aux_p_bin;
    int dim_aux_p_bin_1;
    int dim_aux_p_bin_2;
    int dim_beta_step;
    int dim_delta_D;
    int dim_delta_E;
    int dim_delta_E_1;
    int dim_delta_E_12;
    int dim_delta_E_2;
    int dim_delta_E_3;
    int dim_delta_I_A;
    int dim_delta_I_A_1;
    int dim_delta_I_A_12;
    int dim_delta_I_A_2;
    int dim_delta_I_A_3;
    int dim_delta_I_C;
    int dim_delta_I_C_1;
    int dim_delta_I_C_12;
    int dim_delta_I_C_2;
    int dim_delta_I_C_3;
    int dim_delta_I_ICU;
    int dim_delta_I_ICU_1;
    int dim_delta_I_ICU_12;
    int dim_delta_I_ICU_2;
    int dim_delta_I_ICU_3;
    int dim_delta_I_hosp;
    int dim_delta_I_hosp_1;
    int dim_delta_I_hosp_12;
    int dim_delta_I_hosp_2;
    int dim_delta_I_hosp_3;
    int dim_delta_R;
    int dim_delta_R_hosp;
    int dim_delta_R_hosp_1;
    int dim_delta_R_hosp_12;
    int dim_delta_R_hosp_2;
    int dim_delta_R_hosp_3;
    int dim_lambda;
    int dim_m;
    int dim_m_1;
    int dim_m_2;
    int dim_n_EE;
    int dim_n_EE_1;
    int dim_n_EE_12;
    int dim_n_EE_2;
    int dim_n_EE_3;
    int dim_n_EI_A;
    int dim_n_EI_A_1;
    int dim_n_EI_A_2;
    int dim_n_EI_C;
    int dim_n_EI_C_1;
    int dim_n_EI_C_2;
    int dim_n_ICU_to_R_hosp;
    int dim_n_ICU_to_R_hosp_1;
    int dim_n_ICU_to_R_hosp_2;
    int dim_n_II_A;
    int dim_n_II_A_1;
    int dim_n_II_A_12;
    int dim_n_II_A_2;
    int dim_n_II_A_3;
    int dim_n_II_C;
    int dim_n_II_C_1;
    int dim_n_II_C_12;
    int dim_n_II_C_2;
    int dim_n_II_C_3;
    int dim_n_II_ICU;
    int dim_n_II_ICU_1;
    int dim_n_II_ICU_12;
    int dim_n_II_ICU_2;
    int dim_n_II_ICU_3;
    int dim_n_II_hosp;
    int dim_n_II_hosp_1;
    int dim_n_II_hosp_12;
    int dim_n_II_hosp_2;
    int dim_n_II_hosp_3;
    int dim_n_R_hosp;
    int dim_n_R_hosp_1;
    int dim_n_R_hosp_12;
    int dim_n_R_hosp_2;
    int dim_n_R_hosp_3;
    int dim_n_SE;
    int dim_n_death_hosp;
    int dim_n_death_hosp_1;
    int dim_n_death_hosp_2;
    int dim_n_hosp_to_ICU;
    int dim_n_hosp_to_ICU_1;
    int dim_n_hosp_to_ICU_2;
    int dim_n_sympt_to_hosp;
    int dim_n_sympt_to_hosp_1;
    int dim_n_sympt_to_hosp_2;
    int dim_new_D;
    int dim_new_I_ICU;
    int dim_new_I_ICU_1;
    int dim_new_I_ICU_12;
    int dim_new_I_ICU_2;
    int dim_new_I_ICU_3;
    int dim_p_C;
    int dim_p_SE;
    int dim_p_death_hosp;
    int dim_p_recov_ICU;
    int dim_p_recov_hosp;
    int dim_p_recov_sympt;
    int dim_s_ij;
    int dim_s_ij_1;
    int dim_s_ij_2;
    int dim_seed_value;
    int dim_trans_increase;
    int dim_trans_increase_1;
    int dim_trans_increase_2;
    int dim_trans_profile;
    int dim_trans_profile_1;
    int dim_trans_profile_2;
    real_type dt;
    real_type exp_noise;
    real_type gamma_A;
    real_type gamma_C;
    real_type gamma_E;
    real_type gamma_ICU;
    real_type gamma_hosp;
    real_type gamma_rec;
    real_type hosp_transmission;
    std::vector<real_type> initial_D;
    real_type initial_D_inc;
    real_type initial_D_tot;
    std::vector<real_type> initial_E;
    std::vector<real_type> initial_I_A;
    std::vector<real_type> initial_I_C;
    std::vector<real_type> initial_I_ICU;
    real_type initial_I_ICU_tot;
    std::vector<real_type> initial_I_hosp;
    real_type initial_N_tot;
    std::vector<real_type> initial_R;
    std::vector<real_type> initial_R_hosp;
    std::vector<real_type> initial_S;
    real_type initial_beta_out;
    real_type initial_time;
    int k_A;
    int k_C;
    int k_E;
    int k_ICU;
    int k_hosp;
    int k_rec;
    real_type kappa_ICU;
    real_type kappa_death;
    std::vector<real_type> m;
    int n_age_groups;
    int n_trans_classes;
    int offset_variable_D;
    int offset_variable_E;
    int offset_variable_I_A;
    int offset_variable_I_C;
    int offset_variable_I_ICU;
    int offset_variable_I_hosp;
    int offset_variable_R;
    int offset_variable_R_hosp;
    std::vector<real_type> p_C;
    real_type p_EE;
    real_type p_II_A;
    real_type p_II_C;
    real_type p_II_ICU;
    real_type p_II_hosp;
    real_type p_R_hosp;
    std::vector<real_type> p_death_hosp;
    std::vector<real_type> p_recov_ICU;
    std::vector<real_type> p_recov_hosp;
    std::vector<real_type> p_recov_sympt;
    real_type phi_ICU;
    real_type phi_death;
    int seed_age_band;
    real_type seed_step_end;
    real_type seed_step_start;
    std::vector<real_type> seed_value;
    int steps_per_day;
    std::vector<real_type> trans_increase;
    std::vector<real_type> trans_profile;
  };
  struct internal_type {
    std::vector<real_type> I_with_diff_trans;
    std::vector<real_type> aux_EE;
    std::vector<real_type> aux_II_A;
    std::vector<real_type> aux_II_C;
    std::vector<real_type> aux_II_ICU;
    std::vector<real_type> aux_II_hosp;
    std::vector<real_type> aux_R_hosp;
    std::vector<real_type> delta_D;
    std::vector<real_type> delta_E;
    std::vector<real_type> delta_I_A;
    std::vector<real_type> delta_I_C;
    std::vector<real_type> delta_I_ICU;
    std::vector<real_type> delta_I_hosp;
    std::vector<real_type> delta_R;
    std::vector<real_type> delta_R_hosp;
    std::vector<real_type> lambda;
    std::vector<real_type> n_EE;
    std::vector<real_type> n_EI_A;
    std::vector<real_type> n_EI_C;
    std::vector<real_type> n_ICU_to_R_hosp;
    std::vector<real_type> n_II_A;
    std::vector<real_type> n_II_C;
    std::vector<real_type> n_II_ICU;
    std::vector<real_type> n_II_hosp;
    std::vector<real_type> n_R_hosp;
    std::vector<real_type> n_SE;
    std::vector<real_type> n_death_hosp;
    std::vector<real_type> n_hosp_to_ICU;
    std::vector<real_type> n_sympt_to_hosp;
    std::vector<real_type> new_D;
    std::vector<real_type> new_I_ICU;
    std::vector<real_type> p_SE;
    std::vector<real_type> s_ij;
  };
  basic(const dust::pars_type<basic>& pars) :
    shared(pars.shared), internal(pars.internal) {
  }
  size_t size() {
    return shared->dim_D + shared->dim_E + shared->dim_I_A + shared->dim_I_C + shared->dim_I_ICU + shared->dim_I_hosp + shared->dim_R + shared->dim_R_hosp + shared->dim_S + 6;
  }
  std::vector<real_type> initial(size_t step) {
    std::vector<real_type> state(shared->dim_D + shared->dim_E + shared->dim_I_A + shared->dim_I_C + shared->dim_I_ICU + shared->dim_I_hosp + shared->dim_R + shared->dim_R_hosp + shared->dim_S + 6);
    state[0] = shared->initial_time;
    state[1] = shared->initial_N_tot;
    state[2] = shared->initial_I_ICU_tot;
    state[3] = shared->initial_D_tot;
    state[4] = shared->initial_D_inc;
    state[5] = shared->initial_beta_out;
    std::copy(shared->initial_S.begin(), shared->initial_S.end(), state.begin() + 6);
    std::copy(shared->initial_R.begin(), shared->initial_R.end(), state.begin() + shared->offset_variable_R);
    std::copy(shared->initial_D.begin(), shared->initial_D.end(), state.begin() + shared->offset_variable_D);
    std::copy(shared->initial_E.begin(), shared->initial_E.end(), state.begin() + shared->offset_variable_E);
    std::copy(shared->initial_I_A.begin(), shared->initial_I_A.end(), state.begin() + shared->offset_variable_I_A);
    std::copy(shared->initial_I_C.begin(), shared->initial_I_C.end(), state.begin() + shared->offset_variable_I_C);
    std::copy(shared->initial_I_hosp.begin(), shared->initial_I_hosp.end(), state.begin() + shared->offset_variable_I_hosp);
    std::copy(shared->initial_I_ICU.begin(), shared->initial_I_ICU.end(), state.begin() + shared->offset_variable_I_ICU);
    std::copy(shared->initial_R_hosp.begin(), shared->initial_R_hosp.end(), state.begin() + shared->offset_variable_R_hosp);
    return state;
  }
  void update(size_t step, const real_type * state, rng_state_type& rng_state, real_type * state_next) {
    const real_type * S = state + 6;
    const real_type * E = state + shared->offset_variable_E;
    const real_type * I_A = state + shared->offset_variable_I_A;
    const real_type * I_C = state + shared->offset_variable_I_C;
    const real_type * R = state + shared->offset_variable_R;
    const real_type * I_hosp = state + shared->offset_variable_I_hosp;
    const real_type * I_ICU = state + shared->offset_variable_I_ICU;
    const real_type * R_hosp = state + shared->offset_variable_R_hosp;
    const real_type * D = state + shared->offset_variable_D;
    const real_type D_tot = state[3];
    const real_type D_inc = state[4];
    state_next[1] = odin_sum1<real_type>(S, 0, shared->dim_S) + odin_sum1<real_type>(R, 0, shared->dim_R) + odin_sum1<real_type>(D, 0, shared->dim_D) + odin_sum1<real_type>(E, 0, shared->dim_E) + odin_sum1<real_type>(I_A, 0, shared->dim_I_A) + odin_sum1<real_type>(I_C, 0, shared->dim_I_C) + odin_sum1<real_type>(I_hosp, 0, shared->dim_I_hosp) + odin_sum1<real_type>(I_ICU, 0, shared->dim_I_ICU) + odin_sum1<real_type>(R_hosp, 0, shared->dim_R_hosp);
    real_type beta = (static_cast<int>(step) >= shared->dim_beta_step ? shared->beta_step[shared->dim_beta_step - 1] : shared->beta_step[step + 1 - 1]);
    state_next[0] = (step + 1) * shared->dt;
    real_type seed = (step >= shared->seed_step_start && step < shared->seed_step_end ? shared->seed_value[static_cast<int>(step - shared->seed_step_start + 1) - 1] : 0);
    state_next[5] = beta;
    for (int i = 1; i <= shared->dim_n_EE_1; ++i) {
      for (int j = 1; j <= shared->dim_n_EE_2; ++j) {
        for (int k = 1; k <= shared->dim_n_EE_3; ++k) {
          internal.n_EE[i - 1 + shared->dim_n_EE_1 * (j - 1) + shared->dim_n_EE_12 * (k - 1)] = dust::random::binomial<real_type>(rng_state, E[shared->dim_E_12 * (k - 1) + shared->dim_E_1 * (j - 1) + i - 1], shared->p_EE);
        }
      }
    }
    for (int i = 1; i <= shared->dim_n_II_A_1; ++i) {
      for (int j = 1; j <= shared->dim_n_II_A_2; ++j) {
        for (int k = 1; k <= shared->dim_n_II_A_3; ++k) {
          internal.n_II_A[i - 1 + shared->dim_n_II_A_1 * (j - 1) + shared->dim_n_II_A_12 * (k - 1)] = dust::random::binomial<real_type>(rng_state, I_A[shared->dim_I_A_12 * (k - 1) + shared->dim_I_A_1 * (j - 1) + i - 1], shared->p_II_A);
        }
      }
    }
    for (int i = 1; i <= shared->dim_n_II_C_1; ++i) {
      for (int j = 1; j <= shared->dim_n_II_C_2; ++j) {
        for (int k = 1; k <= shared->dim_n_II_C_3; ++k) {
          internal.n_II_C[i - 1 + shared->dim_n_II_C_1 * (j - 1) + shared->dim_n_II_C_12 * (k - 1)] = dust::random::binomial<real_type>(rng_state, I_C[shared->dim_I_C_12 * (k - 1) + shared->dim_I_C_1 * (j - 1) + i - 1], shared->p_II_C);
        }
      }
    }
    for (int i = 1; i <= shared->dim_n_II_ICU_1; ++i) {
      for (int j = 1; j <= shared->dim_n_II_ICU_2; ++j) {
        for (int k = 1; k <= shared->dim_n_II_ICU_3; ++k) {
          internal.n_II_ICU[i - 1 + shared->dim_n_II_ICU_1 * (j - 1) + shared->dim_n_II_ICU_12 * (k - 1)] = dust::random::binomial<real_type>(rng_state, I_ICU[shared->dim_I_ICU_12 * (k - 1) + shared->dim_I_ICU_1 * (j - 1) + i - 1], shared->p_II_ICU);
        }
      }
    }
    for (int i = 1; i <= shared->dim_n_II_hosp_1; ++i) {
      for (int j = 1; j <= shared->dim_n_II_hosp_2; ++j) {
        for (int k = 1; k <= shared->dim_n_II_hosp_3; ++k) {
          internal.n_II_hosp[i - 1 + shared->dim_n_II_hosp_1 * (j - 1) + shared->dim_n_II_hosp_12 * (k - 1)] = dust::random::binomial<real_type>(rng_state, I_hosp[shared->dim_I_hosp_12 * (k - 1) + shared->dim_I_hosp_1 * (j - 1) + i - 1], shared->p_II_hosp);
        }
      }
    }
    for (int i = 1; i <= shared->dim_n_R_hosp_1; ++i) {
      for (int j = 1; j <= shared->dim_n_R_hosp_2; ++j) {
        for (int k = 1; k <= shared->dim_n_R_hosp_3; ++k) {
          internal.n_R_hosp[i - 1 + shared->dim_n_R_hosp_1 * (j - 1) + shared->dim_n_R_hosp_12 * (k - 1)] = dust::random::binomial<real_type>(rng_state, R_hosp[shared->dim_R_hosp_12 * (k - 1) + shared->dim_R_hosp_1 * (j - 1) + i - 1], shared->p_R_hosp);
        }
      }
    }
    for (int i = 1; i <= shared->dim_I_with_diff_trans_1; ++i) {
      for (int j = 1; j <= shared->dim_I_with_diff_trans_2; ++j) {
        internal.I_with_diff_trans[i - 1 + shared->dim_I_with_diff_trans_1 * (j - 1)] = shared->trans_increase[shared->dim_trans_increase_1 * (j - 1) + i - 1] * (odin_sum3<real_type>(I_A, i - 1, i, 0, shared->dim_I_A_2, j - 1, j, shared->dim_I_A_1, shared->dim_I_A_12) + odin_sum3<real_type>(I_C, i - 1, i, 0, shared->dim_I_C_2, j - 1, j, shared->dim_I_C_1, shared->dim_I_C_12) + shared->hosp_transmission * odin_sum3<real_type>(I_hosp, i - 1, i, 0, shared->dim_I_hosp_2, j - 1, j, shared->dim_I_hosp_1, shared->dim_I_hosp_12) + shared->ICU_transmission * odin_sum3<real_type>(I_ICU, i - 1, i, 0, shared->dim_I_ICU_2, j - 1, j, shared->dim_I_ICU_1, shared->dim_I_ICU_12));
      }
    }
    for (int i = 1; i <= shared->dim_n_EI_A_1; ++i) {
      for (int j = 1; j <= shared->dim_n_EI_A_2; ++j) {
        internal.n_EI_A[i - 1 + shared->dim_n_EI_A_1 * (j - 1)] = dust::random::binomial<real_type>(rng_state, internal.n_EE[shared->dim_n_EE_12 * (j - 1) + shared->dim_n_EE_1 * (shared->k_E - 1) + i - 1], 1 - shared->p_C[i - 1]);
      }
    }
    for (int i = 1; i <= shared->dim_n_ICU_to_R_hosp_1; ++i) {
      for (int j = 1; j <= shared->dim_n_ICU_to_R_hosp_2; ++j) {
        internal.n_ICU_to_R_hosp[i - 1 + shared->dim_n_ICU_to_R_hosp_1 * (j - 1)] = dust::random::binomial<real_type>(rng_state, internal.n_II_ICU[shared->dim_n_II_ICU_12 * (j - 1) + shared->dim_n_II_ICU_1 * (shared->k_ICU - 1) + i - 1], shared->p_recov_ICU[i - 1]);
      }
    }
    for (int i = 1; i <= shared->dim_n_death_hosp_1; ++i) {
      for (int j = 1; j <= shared->dim_n_death_hosp_2; ++j) {
        internal.n_death_hosp[i - 1 + shared->dim_n_death_hosp_1 * (j - 1)] = dust::random::binomial<real_type>(rng_state, internal.n_II_hosp[shared->dim_n_II_hosp_12 * (j - 1) + shared->dim_n_II_hosp_1 * (shared->k_hosp - 1) + i - 1], shared->p_death_hosp[i - 1]);
      }
    }
    for (int i = 1; i <= shared->dim_n_sympt_to_hosp_1; ++i) {
      for (int j = 1; j <= shared->dim_n_sympt_to_hosp_2; ++j) {
        internal.n_sympt_to_hosp[i - 1 + shared->dim_n_sympt_to_hosp_1 * (j - 1)] = dust::random::binomial<real_type>(rng_state, internal.n_II_C[shared->dim_n_II_C_12 * (j - 1) + shared->dim_n_II_C_1 * (shared->k_C - 1) + i - 1], 1 - shared->p_recov_sympt[i - 1]);
      }
    }
    for (int i = 1; i <= shared->dim_aux_II_A_1; ++i) {
      int j = 1;
      for (int k = 1; k <= shared->dim_aux_II_A_3; ++k) {
        internal.aux_II_A[i - 1 + shared->dim_aux_II_A_1 * (j - 1) + shared->dim_aux_II_A_12 * (k - 1)] = internal.n_EI_A[shared->dim_n_EI_A_1 * (k - 1) + i - 1];
      }
    }
    for (int i = 1; i <= shared->dim_aux_II_A_1; ++i) {
      for (int j = 2; j <= shared->k_A; ++j) {
        for (int k = 1; k <= shared->dim_aux_II_A_3; ++k) {
          internal.aux_II_A[i - 1 + shared->dim_aux_II_A_1 * (j - 1) + shared->dim_aux_II_A_12 * (k - 1)] = internal.n_II_A[shared->dim_n_II_A_12 * (k - 1) + shared->dim_n_II_A_1 * (j - 1 - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= shared->dim_aux_II_A_1; ++i) {
      for (int j = 1; j <= shared->k_A; ++j) {
        for (int k = 1; k <= shared->dim_aux_II_A_3; ++k) {
          internal.aux_II_A[i - 1 + shared->dim_aux_II_A_1 * (j - 1) + shared->dim_aux_II_A_12 * (k - 1)] = internal.aux_II_A[shared->dim_aux_II_A_12 * (k - 1) + shared->dim_aux_II_A_1 * (j - 1) + i - 1] - internal.n_II_A[shared->dim_n_II_A_12 * (k - 1) + shared->dim_n_II_A_1 * (j - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= shared->dim_aux_II_hosp_1; ++i) {
      int j = 1;
      for (int k = 1; k <= shared->dim_aux_II_hosp_3; ++k) {
        internal.aux_II_hosp[i - 1 + shared->dim_aux_II_hosp_1 * (j - 1) + shared->dim_aux_II_hosp_12 * (k - 1)] = internal.n_sympt_to_hosp[shared->dim_n_sympt_to_hosp_1 * (k - 1) + i - 1];
      }
    }
    for (int i = 1; i <= shared->dim_aux_II_hosp_1; ++i) {
      for (int j = 2; j <= shared->k_hosp; ++j) {
        for (int k = 1; k <= shared->dim_aux_II_hosp_3; ++k) {
          internal.aux_II_hosp[i - 1 + shared->dim_aux_II_hosp_1 * (j - 1) + shared->dim_aux_II_hosp_12 * (k - 1)] = internal.n_II_hosp[shared->dim_n_II_hosp_12 * (k - 1) + shared->dim_n_II_hosp_1 * (j - 1 - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= shared->dim_aux_II_hosp_1; ++i) {
      for (int j = 1; j <= shared->k_hosp; ++j) {
        for (int k = 1; k <= shared->dim_aux_II_hosp_3; ++k) {
          internal.aux_II_hosp[i - 1 + shared->dim_aux_II_hosp_1 * (j - 1) + shared->dim_aux_II_hosp_12 * (k - 1)] = internal.aux_II_hosp[shared->dim_aux_II_hosp_12 * (k - 1) + shared->dim_aux_II_hosp_1 * (j - 1) + i - 1] - internal.n_II_hosp[shared->dim_n_II_hosp_12 * (k - 1) + shared->dim_n_II_hosp_1 * (j - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= shared->dim_aux_R_hosp_1; ++i) {
      int j = 1;
      for (int k = 1; k <= shared->dim_aux_R_hosp_3; ++k) {
        internal.aux_R_hosp[i - 1 + shared->dim_aux_R_hosp_1 * (j - 1) + shared->dim_aux_R_hosp_12 * (k - 1)] = internal.n_ICU_to_R_hosp[shared->dim_n_ICU_to_R_hosp_1 * (k - 1) + i - 1];
      }
    }
    for (int i = 1; i <= shared->dim_aux_R_hosp_1; ++i) {
      for (int j = 2; j <= shared->k_rec; ++j) {
        for (int k = 1; k <= shared->dim_aux_R_hosp_3; ++k) {
          internal.aux_R_hosp[i - 1 + shared->dim_aux_R_hosp_1 * (j - 1) + shared->dim_aux_R_hosp_12 * (k - 1)] = internal.n_R_hosp[shared->dim_n_R_hosp_12 * (k - 1) + shared->dim_n_R_hosp_1 * (j - 1 - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= shared->dim_aux_R_hosp_1; ++i) {
      for (int j = 1; j <= shared->k_rec; ++j) {
        for (int k = 1; k <= shared->dim_aux_R_hosp_3; ++k) {
          internal.aux_R_hosp[i - 1 + shared->dim_aux_R_hosp_1 * (j - 1) + shared->dim_aux_R_hosp_12 * (k - 1)] = internal.aux_R_hosp[shared->dim_aux_R_hosp_12 * (k - 1) + shared->dim_aux_R_hosp_1 * (j - 1) + i - 1] - internal.n_R_hosp[shared->dim_n_R_hosp_12 * (k - 1) + shared->dim_n_R_hosp_1 * (j - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= shared->dim_delta_D; ++i) {
      internal.delta_D[i - 1] = odin_sum3<real_type>(internal.n_II_ICU.data(), i - 1, i, shared->k_ICU - 1, shared->k_ICU, 0, shared->dim_n_II_ICU_3, shared->dim_n_II_ICU_1, shared->dim_n_II_ICU_12) - odin_sum2<real_type>(internal.n_ICU_to_R_hosp.data(), i - 1, i, 0, shared->dim_n_ICU_to_R_hosp_2, shared->dim_n_ICU_to_R_hosp_1) + odin_sum2<real_type>(internal.n_death_hosp.data(), i - 1, i, 0, shared->dim_n_death_hosp_2, shared->dim_n_death_hosp_1);
    }
    for (int i = 1; i <= shared->dim_n_EI_C_1; ++i) {
      for (int j = 1; j <= shared->dim_n_EI_C_2; ++j) {
        internal.n_EI_C[i - 1 + shared->dim_n_EI_C_1 * (j - 1)] = internal.n_EE[shared->dim_n_EE_12 * (j - 1) + shared->dim_n_EE_1 * (shared->k_E - 1) + i - 1] - internal.n_EI_A[shared->dim_n_EI_A_1 * (j - 1) + i - 1];
      }
    }
    for (int i = 1; i <= shared->dim_n_hosp_to_ICU_1; ++i) {
      for (int j = 1; j <= shared->dim_n_hosp_to_ICU_2; ++j) {
        internal.n_hosp_to_ICU[i - 1 + shared->dim_n_hosp_to_ICU_1 * (j - 1)] = dust::random::binomial<real_type>(rng_state, internal.n_II_hosp[shared->dim_n_II_hosp_12 * (j - 1) + shared->dim_n_II_hosp_1 * (shared->k_hosp - 1) + i - 1] - internal.n_death_hosp[shared->dim_n_death_hosp_1 * (j - 1) + i - 1], 1 - shared->p_recov_hosp[i - 1] - shared->p_death_hosp[i - 1]);
      }
    }
    for (int i = 1; i <= shared->dim_s_ij_1; ++i) {
      for (int j = 1; j <= shared->dim_s_ij_2; ++j) {
        internal.s_ij[i - 1 + shared->dim_s_ij_1 * (j - 1)] = shared->m[shared->dim_m_1 * (j - 1) + i - 1] * odin_sum2<real_type>(internal.I_with_diff_trans.data(), j - 1, j, 0, shared->dim_I_with_diff_trans_2, shared->dim_I_with_diff_trans_1);
      }
    }
    for (int i = 1; i <= shared->dim_aux_II_C_1; ++i) {
      int j = 1;
      for (int k = 1; k <= shared->dim_aux_II_C_3; ++k) {
        internal.aux_II_C[i - 1 + shared->dim_aux_II_C_1 * (j - 1) + shared->dim_aux_II_C_12 * (k - 1)] = internal.n_EI_C[shared->dim_n_EI_C_1 * (k - 1) + i - 1];
      }
    }
    for (int i = 1; i <= shared->dim_aux_II_C_1; ++i) {
      for (int j = 2; j <= shared->k_C; ++j) {
        for (int k = 1; k <= shared->dim_aux_II_C_3; ++k) {
          internal.aux_II_C[i - 1 + shared->dim_aux_II_C_1 * (j - 1) + shared->dim_aux_II_C_12 * (k - 1)] = internal.n_II_C[shared->dim_n_II_C_12 * (k - 1) + shared->dim_n_II_C_1 * (j - 1 - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= shared->dim_aux_II_C_1; ++i) {
      for (int j = 1; j <= shared->k_C; ++j) {
        for (int k = 1; k <= shared->dim_aux_II_C_3; ++k) {
          internal.aux_II_C[i - 1 + shared->dim_aux_II_C_1 * (j - 1) + shared->dim_aux_II_C_12 * (k - 1)] = internal.aux_II_C[shared->dim_aux_II_C_12 * (k - 1) + shared->dim_aux_II_C_1 * (j - 1) + i - 1] - internal.n_II_C[shared->dim_n_II_C_12 * (k - 1) + shared->dim_n_II_C_1 * (j - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= shared->dim_aux_II_ICU_1; ++i) {
      int j = 1;
      for (int k = 1; k <= shared->dim_aux_II_ICU_3; ++k) {
        internal.aux_II_ICU[i - 1 + shared->dim_aux_II_ICU_1 * (j - 1) + shared->dim_aux_II_ICU_12 * (k - 1)] = internal.n_hosp_to_ICU[shared->dim_n_hosp_to_ICU_1 * (k - 1) + i - 1];
      }
    }
    for (int i = 1; i <= shared->dim_aux_II_ICU_1; ++i) {
      for (int j = 2; j <= shared->k_ICU; ++j) {
        for (int k = 1; k <= shared->dim_aux_II_ICU_3; ++k) {
          internal.aux_II_ICU[i - 1 + shared->dim_aux_II_ICU_1 * (j - 1) + shared->dim_aux_II_ICU_12 * (k - 1)] = internal.n_II_ICU[shared->dim_n_II_ICU_12 * (k - 1) + shared->dim_n_II_ICU_1 * (j - 1 - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= shared->dim_aux_II_ICU_1; ++i) {
      for (int j = 1; j <= shared->k_ICU; ++j) {
        for (int k = 1; k <= shared->dim_aux_II_ICU_3; ++k) {
          internal.aux_II_ICU[i - 1 + shared->dim_aux_II_ICU_1 * (j - 1) + shared->dim_aux_II_ICU_12 * (k - 1)] = internal.aux_II_ICU[shared->dim_aux_II_ICU_12 * (k - 1) + shared->dim_aux_II_ICU_1 * (j - 1) + i - 1] - internal.n_II_ICU[shared->dim_n_II_ICU_12 * (k - 1) + shared->dim_n_II_ICU_1 * (j - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= shared->dim_delta_I_A_1; ++i) {
      for (int j = 1; j <= shared->dim_delta_I_A_2; ++j) {
        for (int k = 1; k <= shared->dim_delta_I_A_3; ++k) {
          internal.delta_I_A[i - 1 + shared->dim_delta_I_A_1 * (j - 1) + shared->dim_delta_I_A_12 * (k - 1)] = internal.aux_II_A[shared->dim_aux_II_A_12 * (k - 1) + shared->dim_aux_II_A_1 * (j - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= shared->dim_delta_I_hosp_1; ++i) {
      for (int j = 1; j <= shared->dim_delta_I_hosp_2; ++j) {
        for (int k = 1; k <= shared->dim_delta_I_hosp_3; ++k) {
          internal.delta_I_hosp[i - 1 + shared->dim_delta_I_hosp_1 * (j - 1) + shared->dim_delta_I_hosp_12 * (k - 1)] = internal.aux_II_hosp[shared->dim_aux_II_hosp_12 * (k - 1) + shared->dim_aux_II_hosp_1 * (j - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= shared->dim_delta_R; ++i) {
      internal.delta_R[i - 1] = odin_sum3<real_type>(internal.n_II_A.data(), i - 1, i, shared->k_A - 1, shared->k_A, 0, shared->dim_n_II_A_3, shared->dim_n_II_A_1, shared->dim_n_II_A_12) + odin_sum3<real_type>(internal.n_II_C.data(), i - 1, i, shared->k_C - 1, shared->k_C, 0, shared->dim_n_II_C_3, shared->dim_n_II_C_1, shared->dim_n_II_C_12) - odin_sum2<real_type>(internal.n_sympt_to_hosp.data(), i - 1, i, 0, shared->dim_n_sympt_to_hosp_2, shared->dim_n_sympt_to_hosp_1) + odin_sum3<real_type>(internal.n_II_hosp.data(), i - 1, i, shared->k_hosp - 1, shared->k_hosp, 0, shared->dim_n_II_hosp_3, shared->dim_n_II_hosp_1, shared->dim_n_II_hosp_12) - odin_sum2<real_type>(internal.n_hosp_to_ICU.data(), i - 1, i, 0, shared->dim_n_hosp_to_ICU_2, shared->dim_n_hosp_to_ICU_1) - odin_sum2<real_type>(internal.n_death_hosp.data(), i - 1, i, 0, shared->dim_n_death_hosp_2, shared->dim_n_death_hosp_1) + odin_sum3<real_type>(internal.n_R_hosp.data(), i - 1, i, shared->k_rec - 1, shared->k_rec, 0, shared->dim_n_R_hosp_3, shared->dim_n_R_hosp_1, shared->dim_n_R_hosp_12);
    }
    for (int i = 1; i <= shared->dim_delta_R_hosp_1; ++i) {
      for (int j = 1; j <= shared->dim_delta_R_hosp_2; ++j) {
        for (int k = 1; k <= shared->dim_delta_R_hosp_3; ++k) {
          internal.delta_R_hosp[i - 1 + shared->dim_delta_R_hosp_1 * (j - 1) + shared->dim_delta_R_hosp_12 * (k - 1)] = internal.aux_R_hosp[shared->dim_aux_R_hosp_12 * (k - 1) + shared->dim_aux_R_hosp_1 * (j - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= shared->dim_lambda; ++i) {
      internal.lambda[i - 1] = beta * odin_sum2<real_type>(internal.s_ij.data(), i - 1, i, 0, shared->dim_s_ij_2, shared->dim_s_ij_1);
    }
    for (int i = 1; i <= shared->dim_new_D; ++i) {
      internal.new_D[i - 1] = internal.delta_D[i - 1];
    }
    for (int i = 1; i <= shared->dim_delta_I_C_1; ++i) {
      for (int j = 1; j <= shared->dim_delta_I_C_2; ++j) {
        for (int k = 1; k <= shared->dim_delta_I_C_3; ++k) {
          internal.delta_I_C[i - 1 + shared->dim_delta_I_C_1 * (j - 1) + shared->dim_delta_I_C_12 * (k - 1)] = internal.aux_II_C[shared->dim_aux_II_C_12 * (k - 1) + shared->dim_aux_II_C_1 * (j - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= shared->dim_delta_I_ICU_1; ++i) {
      for (int j = 1; j <= shared->dim_delta_I_ICU_2; ++j) {
        for (int k = 1; k <= shared->dim_delta_I_ICU_3; ++k) {
          internal.delta_I_ICU[i - 1 + shared->dim_delta_I_ICU_1 * (j - 1) + shared->dim_delta_I_ICU_12 * (k - 1)] = internal.aux_II_ICU[shared->dim_aux_II_ICU_12 * (k - 1) + shared->dim_aux_II_ICU_1 * (j - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= shared->dim_p_SE; ++i) {
      internal.p_SE[i - 1] = 1 - std::exp(- internal.lambda[i - 1] * shared->dt);
    }
    real_type tot_new_D = odin_sum1<real_type>(internal.new_D.data(), 0, shared->dim_new_D);
    for (int i = 1; i <= shared->dim_D; ++i) {
      state_next[shared->offset_variable_D + i - 1] = D[i - 1] + internal.new_D[i - 1];
    }
    for (int i = 1; i <= shared->dim_I_A_1; ++i) {
      for (int j = 1; j <= shared->dim_I_A_2; ++j) {
        for (int k = 1; k <= shared->dim_I_A_3; ++k) {
          state_next[shared->offset_variable_I_A + i - 1 + shared->dim_I_A_1 * (j - 1) + shared->dim_I_A_12 * (k - 1)] = I_A[shared->dim_I_A_12 * (k - 1) + shared->dim_I_A_1 * (j - 1) + i - 1] + internal.delta_I_A[shared->dim_delta_I_A_12 * (k - 1) + shared->dim_delta_I_A_1 * (j - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= shared->dim_I_hosp_1; ++i) {
      for (int j = 1; j <= shared->dim_I_hosp_2; ++j) {
        for (int k = 1; k <= shared->dim_I_hosp_3; ++k) {
          state_next[shared->offset_variable_I_hosp + i - 1 + shared->dim_I_hosp_1 * (j - 1) + shared->dim_I_hosp_12 * (k - 1)] = I_hosp[shared->dim_I_hosp_12 * (k - 1) + shared->dim_I_hosp_1 * (j - 1) + i - 1] + internal.delta_I_hosp[shared->dim_delta_I_hosp_12 * (k - 1) + shared->dim_delta_I_hosp_1 * (j - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= shared->dim_R; ++i) {
      state_next[shared->offset_variable_R + i - 1] = R[i - 1] + internal.delta_R[i - 1];
    }
    for (int i = 1; i <= shared->dim_R_hosp_1; ++i) {
      for (int j = 1; j <= shared->dim_R_hosp_2; ++j) {
        for (int k = 1; k <= shared->dim_R_hosp_3; ++k) {
          state_next[shared->offset_variable_R_hosp + i - 1 + shared->dim_R_hosp_1 * (j - 1) + shared->dim_R_hosp_12 * (k - 1)] = R_hosp[shared->dim_R_hosp_12 * (k - 1) + shared->dim_R_hosp_1 * (j - 1) + i - 1] + internal.delta_R_hosp[shared->dim_delta_R_hosp_12 * (k - 1) + shared->dim_delta_R_hosp_1 * (j - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= shared->dim_n_SE; ++i) {
      internal.n_SE[i - 1] = dust::random::binomial<real_type>(rng_state, S[i - 1], internal.p_SE[i - 1]);
    }
    {
       int i = shared->seed_age_band;
       internal.n_SE[i - 1] = dust::random::poisson<real_type>(rng_state, seed);
    }
    for (int i = 1; i <= shared->dim_new_I_ICU_1; ++i) {
      for (int j = 1; j <= shared->dim_new_I_ICU_2; ++j) {
        for (int k = 1; k <= shared->dim_new_I_ICU_3; ++k) {
          internal.new_I_ICU[i - 1 + shared->dim_new_I_ICU_1 * (j - 1) + shared->dim_new_I_ICU_12 * (k - 1)] = I_ICU[shared->dim_I_ICU_12 * (k - 1) + shared->dim_I_ICU_1 * (j - 1) + i - 1] + internal.delta_I_ICU[shared->dim_delta_I_ICU_12 * (k - 1) + shared->dim_delta_I_ICU_1 * (j - 1) + i - 1];
        }
      }
    }
    state_next[4] = (fmodr<real_type>(step, shared->steps_per_day) == 0 ? tot_new_D : D_inc + tot_new_D);
    state_next[3] = D_tot + tot_new_D;
    for (int i = 1; i <= shared->dim_I_C_1; ++i) {
      for (int j = 1; j <= shared->dim_I_C_2; ++j) {
        for (int k = 1; k <= shared->dim_I_C_3; ++k) {
          state_next[shared->offset_variable_I_C + i - 1 + shared->dim_I_C_1 * (j - 1) + shared->dim_I_C_12 * (k - 1)] = I_C[shared->dim_I_C_12 * (k - 1) + shared->dim_I_C_1 * (j - 1) + i - 1] + internal.delta_I_C[shared->dim_delta_I_C_12 * (k - 1) + shared->dim_delta_I_C_1 * (j - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= shared->dim_aux_EE_1; ++i) {
      int j = 1;
      int k = 1;
      internal.aux_EE[i - 1 + shared->dim_aux_EE_1 * (j - 1) + shared->dim_aux_EE_12 * (k - 1)] = dust::random::binomial<real_type>(rng_state, internal.n_SE[i - 1], shared->aux_p_bin[shared->dim_aux_p_bin_1 * 0 + i - 1]);
    }
    for (int i = 1; i <= shared->dim_aux_EE_1; ++i) {
      int j = 1;
      for (int k = 2; k <= (shared->n_trans_classes - 1); ++k) {
        internal.aux_EE[i - 1 + shared->dim_aux_EE_1 * (j - 1) + shared->dim_aux_EE_12 * (k - 1)] = dust::random::binomial<real_type>(rng_state, internal.n_SE[i - 1] - odin_sum3<real_type>(internal.aux_EE.data(), i - 1, i, 0, 1, 0, k - 1, shared->dim_aux_EE_1, shared->dim_aux_EE_12), shared->aux_p_bin[shared->dim_aux_p_bin_1 * (k - 1) + i - 1]);
      }
    }
    for (int i = 1; i <= shared->dim_aux_EE_1; ++i) {
      int j = 1;
      int k = shared->n_trans_classes;
      internal.aux_EE[i - 1 + shared->dim_aux_EE_1 * (j - 1) + shared->dim_aux_EE_12 * (k - 1)] = internal.n_SE[i - 1] - odin_sum3<real_type>(internal.aux_EE.data(), i - 1, i, 0, 1, 0, shared->n_trans_classes - 1, shared->dim_aux_EE_1, shared->dim_aux_EE_12);
    }
    for (int i = 1; i <= shared->dim_aux_EE_1; ++i) {
      for (int j = 2; j <= shared->k_E; ++j) {
        for (int k = 1; k <= shared->dim_aux_EE_3; ++k) {
          internal.aux_EE[i - 1 + shared->dim_aux_EE_1 * (j - 1) + shared->dim_aux_EE_12 * (k - 1)] = internal.n_EE[shared->dim_n_EE_12 * (k - 1) + shared->dim_n_EE_1 * (j - 1 - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= shared->dim_aux_EE_1; ++i) {
      for (int j = 1; j <= shared->k_E; ++j) {
        for (int k = 1; k <= shared->dim_aux_EE_3; ++k) {
          internal.aux_EE[i - 1 + shared->dim_aux_EE_1 * (j - 1) + shared->dim_aux_EE_12 * (k - 1)] = internal.aux_EE[shared->dim_aux_EE_12 * (k - 1) + shared->dim_aux_EE_1 * (j - 1) + i - 1] - internal.n_EE[shared->dim_n_EE_12 * (k - 1) + shared->dim_n_EE_1 * (j - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= shared->dim_I_ICU_1; ++i) {
      for (int j = 1; j <= shared->dim_I_ICU_2; ++j) {
        for (int k = 1; k <= shared->dim_I_ICU_3; ++k) {
          state_next[shared->offset_variable_I_ICU + i - 1 + shared->dim_I_ICU_1 * (j - 1) + shared->dim_I_ICU_12 * (k - 1)] = internal.new_I_ICU[shared->dim_new_I_ICU_12 * (k - 1) + shared->dim_new_I_ICU_1 * (j - 1) + i - 1];
        }
      }
    }
    state_next[2] = odin_sum1<real_type>(internal.new_I_ICU.data(), 0, shared->dim_new_I_ICU);
    for (int i = 1; i <= shared->dim_S; ++i) {
      state_next[6 + i - 1] = S[i - 1] - internal.n_SE[i - 1];
    }
    for (int i = 1; i <= shared->dim_delta_E_1; ++i) {
      for (int j = 1; j <= shared->dim_delta_E_2; ++j) {
        for (int k = 1; k <= shared->dim_delta_E_3; ++k) {
          internal.delta_E[i - 1 + shared->dim_delta_E_1 * (j - 1) + shared->dim_delta_E_12 * (k - 1)] = internal.aux_EE[shared->dim_aux_EE_12 * (k - 1) + shared->dim_aux_EE_1 * (j - 1) + i - 1];
        }
      }
    }
    for (int i = 1; i <= shared->dim_E_1; ++i) {
      for (int j = 1; j <= shared->dim_E_2; ++j) {
        for (int k = 1; k <= shared->dim_E_3; ++k) {
          state_next[shared->offset_variable_E + i - 1 + shared->dim_E_1 * (j - 1) + shared->dim_E_12 * (k - 1)] = E[shared->dim_E_12 * (k - 1) + shared->dim_E_1 * (j - 1) + i - 1] + internal.delta_E[shared->dim_delta_E_12 * (k - 1) + shared->dim_delta_E_1 * (j - 1) + i - 1];
        }
      }
    }
  }
  real_type compare_data(const real_type * state, const data_type& data, rng_state_type& rng_state) {
    return compare<basic>(state, data, internal, shared, rng_state);
  }
private:
  std::shared_ptr<const shared_type> shared;
  internal_type internal;
};
template <typename real_type, typename container>
__host__ __device__ real_type odin_sum2(const container x, int from_i, int to_i, int from_j, int to_j, int dim_x_1) {
  real_type tot = 0.0;
  for (int j = from_j; j < to_j; ++j) {
    int jj = j * dim_x_1;
    for (int i = from_i; i < to_i; ++i) {
      tot += x[i + jj];
    }
  }
  return tot;
}
template <typename real_type, typename container>
__host__ __device__ real_type odin_sum3(const container x, int from_i, int to_i, int from_j, int to_j, int from_k, int to_k, int dim_x_1, int dim_x_12) {
  real_type tot = 0.0;
  for (int k = from_k; k < to_k; ++k) {
    int kk = k * dim_x_12;
    for (int j = from_j; j < to_j; ++j) {
      int jj = j * dim_x_1 + kk;
      for (int i = from_i; i < to_i; ++i) {
        tot += x[i + jj];
      }
    }
  }
  return tot;
}
#include <array>
#include <cpp11/R.hpp>
#include <cpp11/sexp.hpp>
#include <cpp11/doubles.hpp>
#include <cpp11/integers.hpp>
#include <cpp11/list.hpp>
#include <cpp11/strings.hpp>
#include <memory>
#include <vector>

template <typename T>
inline bool is_na(T x);

template <>
inline bool is_na(int x) {
  return x == NA_INTEGER;
}

template <>
inline bool is_na(double x) {
  return ISNA(x);
}

inline size_t object_length(cpp11::sexp x) {
  return ::Rf_xlength(x);
}

template <typename T>
void user_check_value(T value, const char *name, T min, T max) {
  if (is_na(value)) {
    cpp11::stop("'%s' must not be NA", name);
  }
  if (!is_na(min) && value < min) {
    cpp11::stop("Expected '%s' to be at least %g", name, (double) min);
  }
  if (!is_na(max) && value > max) {
    cpp11::stop("Expected '%s' to be at most %g", name, (double) max);
  }
}

template <typename T>
void user_check_array_value(const std::vector<T>& value, const char *name,
                            T min, T max) {
  for (auto& x : value) {
    user_check_value(x, name, min, max);
  }
}

inline size_t user_get_array_rank(cpp11::sexp x) {
  if (!::Rf_isArray(x)) {
    return 1;
  } else {
    cpp11::integers dim = cpp11::as_cpp<cpp11::integers>(x.attr("dim"));
    return dim.size();
  }
}

template <size_t N>
void user_check_array_rank(cpp11::sexp x, const char *name) {
  size_t rank = user_get_array_rank(x);
  if (rank != N) {
    if (N == 1) {
      cpp11::stop("Expected a vector for '%s'", name);
    } else if (N == 2) {
      cpp11::stop("Expected a matrix for '%s'", name);
    } else {
      cpp11::stop("Expected an array of rank %d for '%s'", N, name);
    }
  }
}

template <size_t N>
void user_check_array_dim(cpp11::sexp x, const char *name,
                          const std::array<int, N>& dim_expected) {
  cpp11::integers dim = cpp11::as_cpp<cpp11::integers>(x.attr("dim"));
  for (size_t i = 0; i < N; ++i) {
    if (dim[(int)i] != dim_expected[i]) {
      Rf_error("Incorrect size of dimension %d of '%s' (expected %d)",
               i + 1, name, dim_expected[i]);
    }
  }
}

template <>
inline void user_check_array_dim<1>(cpp11::sexp x, const char *name,
                                    const std::array<int, 1>& dim_expected) {
  if ((int)object_length(x) != dim_expected[0]) {
    cpp11::stop("Expected length %d value for '%s'", dim_expected[0], name);
  }
}

template <size_t N>
void user_set_array_dim(cpp11::sexp x, const char *name,
                        std::array<int, N>& dim) {
  cpp11::integers dim_given = cpp11::as_cpp<cpp11::integers>(x.attr("dim"));
  std::copy(dim_given.begin(), dim_given.end(), dim.begin());
}

template <>
inline void user_set_array_dim<1>(cpp11::sexp x, const char *name,
                                  std::array<int, 1>& dim) {
  dim[0] = object_length(x);
}

template <typename T>
T user_get_scalar(cpp11::list user, const char *name,
                  const T previous, T min, T max) {
  T ret = previous;
  cpp11::sexp x = user[name];
  if (x != R_NilValue) {
    if (object_length(x) != 1) {
      cpp11::stop("Expected a scalar numeric for '%s'", name);
    }
    // TODO: when we're getting out an integer this is a bit too relaxed
    if (TYPEOF(x) == REALSXP) {
      ret = cpp11::as_cpp<T>(x);
    } else if (TYPEOF(x) == INTSXP) {
      ret = cpp11::as_cpp<T>(x);
    } else {
      cpp11::stop("Expected a numeric value for %s", name);
    }
  }

  if (is_na(ret)) {
    cpp11::stop("Expected a value for '%s'", name);
  }
  user_check_value<T>(ret, name, min, max);
  return ret;
}

template <>
inline float user_get_scalar<float>(cpp11::list user, const char *name,
                                    const float previous, float min, float max) {
  double value = user_get_scalar<double>(user, name, previous, min, max);
  return static_cast<float>(value);
}

template <typename T>
std::vector<T> user_get_array_value(cpp11::sexp x, const char * name,
                                    T min, T max) {
  std::vector<T> ret = cpp11::as_cpp<std::vector<T>>(x);
  user_check_array_value<T>(ret, name, min, max);
  return ret;
}

template <typename T, size_t N>
std::vector<T> user_get_array_fixed(cpp11::list user, const char *name,
                                    const std::vector<T> previous,
                                    const std::array<int, N>& dim,
                                    T min, T max) {
  cpp11::sexp x = user[name];
  if (x == R_NilValue) {
    if (previous.size() == 0) {
      cpp11::stop("Expected a value for '%s'", name);
    }
    return previous;
  }

  user_check_array_rank<N>(x, name);
  user_check_array_dim<N>(x, name, dim);

  return user_get_array_value<T>(x, name, min, max);
}

template <typename T, size_t N>
std::vector<T> user_get_array_variable(cpp11::list user, const char *name,
                                       std::vector<T> previous,
                                       std::array<int, N>& dim,
                                       T min, T max) {
  cpp11::sexp x = user[name];
  if (x == R_NilValue) {
    if (previous.size() == 0) {
      cpp11::stop("Expected a value for '%s'", name);
    }
    return previous;
  }

  user_check_array_rank<N>(x, name);
  user_set_array_dim<N>(x, name, dim);

  return user_get_array_value<T>(x, name, min, max);
}

template <>
inline std::vector<float> user_get_array_value(cpp11::sexp x, const char * name,
                                               float min, float max) {
  // NOTE: possible under/overflow here for min/max because we've
  // downcast this.
  std::vector<double> value = user_get_array_value<double>(x, name, min, max);
  std::vector<float> ret(value.size());
  std::copy(value.begin(), value.end(), ret.begin());
  return ret;
}

// This is sum with inclusive "from", exclusive "to", following the
// same function in odin
template <typename real_type, typename container>
__host__ __device__
real_type odin_sum1(const container x, size_t from, size_t to) {
  real_type tot = 0.0;
  for (size_t i = from; i < to; ++i) {
    tot += x[i];
  }
  return tot;
}

inline cpp11::writable::integers integer_sequence(size_t from, size_t len) {
  cpp11::writable::integers ret(len);
  int* data = INTEGER(ret);
  for (size_t i = 0, j = from; i < len; ++i, ++j) {
    data[i] = j;
  }
  return ret;
}
namespace dust {
template<>
dust::pars_type<basic> dust_pars<basic>(cpp11::list user) {
  using real_type = typename basic::real_type;
  auto shared = std::make_shared<basic::shared_type>();
  basic::internal_type internal;
  shared->initial_D_inc = 0;
  shared->initial_D_tot = 0;
  shared->initial_I_ICU_tot = 0;
  shared->initial_N_tot = 0;
  shared->initial_time = 0;
  shared->seed_age_band = static_cast<int>(4);
  shared->ICU_transmission = NA_REAL;
  shared->exp_noise = NA_REAL;
  shared->hosp_transmission = NA_REAL;
  shared->k_A = NA_INTEGER;
  shared->k_C = NA_INTEGER;
  shared->k_E = NA_INTEGER;
  shared->k_ICU = NA_INTEGER;
  shared->k_hosp = NA_INTEGER;
  shared->k_rec = NA_INTEGER;
  shared->kappa_ICU = NA_REAL;
  shared->kappa_death = NA_REAL;
  shared->n_age_groups = NA_INTEGER;
  shared->phi_ICU = NA_REAL;
  shared->phi_death = NA_REAL;
  shared->seed_step_start = NA_REAL;
  shared->steps_per_day = NA_INTEGER;
  shared->gamma_A = 0.10000000000000001;
  shared->gamma_C = 0.10000000000000001;
  shared->gamma_E = 0.10000000000000001;
  shared->gamma_ICU = 0.10000000000000001;
  shared->gamma_hosp = 0.10000000000000001;
  shared->gamma_rec = 0.10000000000000001;
  shared->n_trans_classes = 1;
  shared->ICU_transmission = user_get_scalar<real_type>(user, "ICU_transmission", shared->ICU_transmission, NA_REAL, NA_REAL);
  std::array <int, 1> dim_beta_step;
  shared->beta_step = user_get_array_variable<real_type, 1>(user, "beta_step", shared->beta_step, dim_beta_step, NA_REAL, NA_REAL);
  shared->dim_beta_step = shared->beta_step.size();
  shared->exp_noise = user_get_scalar<real_type>(user, "exp_noise", shared->exp_noise, NA_REAL, NA_REAL);
  shared->gamma_A = user_get_scalar<real_type>(user, "gamma_A", shared->gamma_A, NA_REAL, NA_REAL);
  shared->gamma_C = user_get_scalar<real_type>(user, "gamma_C", shared->gamma_C, NA_REAL, NA_REAL);
  shared->gamma_E = user_get_scalar<real_type>(user, "gamma_E", shared->gamma_E, NA_REAL, NA_REAL);
  shared->gamma_ICU = user_get_scalar<real_type>(user, "gamma_ICU", shared->gamma_ICU, NA_REAL, NA_REAL);
  shared->gamma_hosp = user_get_scalar<real_type>(user, "gamma_hosp", shared->gamma_hosp, NA_REAL, NA_REAL);
  shared->gamma_rec = user_get_scalar<real_type>(user, "gamma_rec", shared->gamma_rec, NA_REAL, NA_REAL);
  shared->hosp_transmission = user_get_scalar<real_type>(user, "hosp_transmission", shared->hosp_transmission, NA_REAL, NA_REAL);
  shared->k_A = user_get_scalar<int>(user, "k_A", shared->k_A, NA_REAL, NA_REAL);
  shared->k_C = user_get_scalar<int>(user, "k_C", shared->k_C, NA_REAL, NA_REAL);
  shared->k_E = user_get_scalar<int>(user, "k_E", shared->k_E, NA_REAL, NA_REAL);
  shared->k_ICU = user_get_scalar<int>(user, "k_ICU", shared->k_ICU, NA_REAL, NA_REAL);
  shared->k_hosp = user_get_scalar<int>(user, "k_hosp", shared->k_hosp, NA_REAL, NA_REAL);
  shared->k_rec = user_get_scalar<int>(user, "k_rec", shared->k_rec, NA_REAL, NA_REAL);
  shared->kappa_ICU = user_get_scalar<real_type>(user, "kappa_ICU", shared->kappa_ICU, NA_REAL, NA_REAL);
  shared->kappa_death = user_get_scalar<real_type>(user, "kappa_death", shared->kappa_death, NA_REAL, NA_REAL);
  shared->n_age_groups = user_get_scalar<int>(user, "n_age_groups", shared->n_age_groups, NA_REAL, NA_REAL);
  shared->n_trans_classes = user_get_scalar<int>(user, "n_trans_classes", shared->n_trans_classes, NA_REAL, NA_REAL);
  shared->phi_ICU = user_get_scalar<real_type>(user, "phi_ICU", shared->phi_ICU, NA_REAL, NA_REAL);
  shared->phi_death = user_get_scalar<real_type>(user, "phi_death", shared->phi_death, NA_REAL, NA_REAL);
  shared->seed_step_start = user_get_scalar<real_type>(user, "seed_step_start", shared->seed_step_start, NA_REAL, NA_REAL);
  std::array <int, 1> dim_seed_value;
  shared->seed_value = user_get_array_variable<real_type, 1>(user, "seed_value", shared->seed_value, dim_seed_value, NA_REAL, NA_REAL);
  shared->dim_seed_value = shared->seed_value.size();
  shared->steps_per_day = user_get_scalar<int>(user, "steps_per_day", shared->steps_per_day, NA_REAL, NA_REAL);
  shared->dim_D = shared->n_age_groups;
  shared->dim_E_1 = shared->n_age_groups;
  shared->dim_E_2 = shared->k_E;
  shared->dim_E_3 = shared->n_trans_classes;
  shared->dim_I_A_1 = shared->n_age_groups;
  shared->dim_I_A_2 = shared->k_A;
  shared->dim_I_A_3 = shared->n_trans_classes;
  shared->dim_I_C_1 = shared->n_age_groups;
  shared->dim_I_C_2 = shared->k_C;
  shared->dim_I_C_3 = shared->n_trans_classes;
  shared->dim_I_ICU_1 = shared->n_age_groups;
  shared->dim_I_ICU_2 = shared->k_ICU;
  shared->dim_I_ICU_3 = shared->n_trans_classes;
  shared->dim_I_hosp_1 = shared->n_age_groups;
  shared->dim_I_hosp_2 = shared->k_hosp;
  shared->dim_I_hosp_3 = shared->n_trans_classes;
  shared->dim_I_with_diff_trans_1 = shared->n_age_groups;
  shared->dim_I_with_diff_trans_2 = shared->n_trans_classes;
  shared->dim_R = shared->n_age_groups;
  shared->dim_R_hosp_1 = shared->n_age_groups;
  shared->dim_R_hosp_2 = shared->k_rec;
  shared->dim_R_hosp_3 = shared->n_trans_classes;
  shared->dim_S = shared->n_age_groups;
  shared->dim_aux_EE_1 = shared->n_age_groups;
  shared->dim_aux_EE_2 = shared->k_E;
  shared->dim_aux_EE_3 = shared->n_trans_classes;
  shared->dim_aux_II_A_1 = shared->n_age_groups;
  shared->dim_aux_II_A_2 = shared->k_A;
  shared->dim_aux_II_A_3 = shared->n_trans_classes;
  shared->dim_aux_II_C_1 = shared->n_age_groups;
  shared->dim_aux_II_C_2 = shared->k_C;
  shared->dim_aux_II_C_3 = shared->n_trans_classes;
  shared->dim_aux_II_ICU_1 = shared->n_age_groups;
  shared->dim_aux_II_ICU_2 = shared->k_ICU;
  shared->dim_aux_II_ICU_3 = shared->n_trans_classes;
  shared->dim_aux_II_hosp_1 = shared->n_age_groups;
  shared->dim_aux_II_hosp_2 = shared->k_hosp;
  shared->dim_aux_II_hosp_3 = shared->n_trans_classes;
  shared->dim_aux_R_hosp_1 = shared->n_age_groups;
  shared->dim_aux_R_hosp_2 = shared->k_rec;
  shared->dim_aux_R_hosp_3 = shared->n_trans_classes;
  shared->dim_aux_p_bin_1 = shared->n_age_groups;
  shared->dim_aux_p_bin_2 = shared->n_trans_classes;
  shared->dim_delta_D = shared->n_age_groups;
  shared->dim_delta_E_1 = shared->n_age_groups;
  shared->dim_delta_E_2 = shared->k_E;
  shared->dim_delta_E_3 = shared->n_trans_classes;
  shared->dim_delta_I_A_1 = shared->n_age_groups;
  shared->dim_delta_I_A_2 = shared->k_A;
  shared->dim_delta_I_A_3 = shared->n_trans_classes;
  shared->dim_delta_I_C_1 = shared->n_age_groups;
  shared->dim_delta_I_C_2 = shared->k_C;
  shared->dim_delta_I_C_3 = shared->n_trans_classes;
  shared->dim_delta_I_ICU_1 = shared->n_age_groups;
  shared->dim_delta_I_ICU_2 = shared->k_ICU;
  shared->dim_delta_I_ICU_3 = shared->n_trans_classes;
  shared->dim_delta_I_hosp_1 = shared->n_age_groups;
  shared->dim_delta_I_hosp_2 = shared->k_hosp;
  shared->dim_delta_I_hosp_3 = shared->n_trans_classes;
  shared->dim_delta_R = shared->n_age_groups;
  shared->dim_delta_R_hosp_1 = shared->n_age_groups;
  shared->dim_delta_R_hosp_2 = shared->k_rec;
  shared->dim_delta_R_hosp_3 = shared->n_trans_classes;
  shared->dim_lambda = shared->n_age_groups;
  shared->dim_m_1 = shared->n_age_groups;
  shared->dim_m_2 = shared->n_age_groups;
  shared->dim_n_EE_1 = shared->n_age_groups;
  shared->dim_n_EE_2 = shared->k_E;
  shared->dim_n_EE_3 = shared->n_trans_classes;
  shared->dim_n_EI_A_1 = shared->n_age_groups;
  shared->dim_n_EI_A_2 = shared->n_trans_classes;
  shared->dim_n_EI_C_1 = shared->n_age_groups;
  shared->dim_n_EI_C_2 = shared->n_trans_classes;
  shared->dim_n_ICU_to_R_hosp_1 = shared->n_age_groups;
  shared->dim_n_ICU_to_R_hosp_2 = shared->n_trans_classes;
  shared->dim_n_II_A_1 = shared->n_age_groups;
  shared->dim_n_II_A_2 = shared->k_A;
  shared->dim_n_II_A_3 = shared->n_trans_classes;
  shared->dim_n_II_C_1 = shared->n_age_groups;
  shared->dim_n_II_C_2 = shared->k_C;
  shared->dim_n_II_C_3 = shared->n_trans_classes;
  shared->dim_n_II_ICU_1 = shared->n_age_groups;
  shared->dim_n_II_ICU_2 = shared->k_ICU;
  shared->dim_n_II_ICU_3 = shared->n_trans_classes;
  shared->dim_n_II_hosp_1 = shared->n_age_groups;
  shared->dim_n_II_hosp_2 = shared->k_hosp;
  shared->dim_n_II_hosp_3 = shared->n_trans_classes;
  shared->dim_n_R_hosp_1 = shared->n_age_groups;
  shared->dim_n_R_hosp_2 = shared->k_rec;
  shared->dim_n_R_hosp_3 = shared->n_trans_classes;
  shared->dim_n_SE = shared->n_age_groups;
  shared->dim_n_death_hosp_1 = shared->n_age_groups;
  shared->dim_n_death_hosp_2 = shared->n_trans_classes;
  shared->dim_n_hosp_to_ICU_1 = shared->n_age_groups;
  shared->dim_n_hosp_to_ICU_2 = shared->n_trans_classes;
  shared->dim_n_sympt_to_hosp_1 = shared->n_age_groups;
  shared->dim_n_sympt_to_hosp_2 = shared->n_trans_classes;
  shared->dim_new_D = shared->n_age_groups;
  shared->dim_new_I_ICU_1 = shared->n_age_groups;
  shared->dim_new_I_ICU_2 = shared->k_ICU;
  shared->dim_new_I_ICU_3 = shared->n_trans_classes;
  shared->dim_p_C = shared->n_age_groups;
  shared->dim_p_SE = shared->n_age_groups;
  shared->dim_p_death_hosp = shared->n_age_groups;
  shared->dim_p_recov_ICU = shared->n_age_groups;
  shared->dim_p_recov_hosp = shared->n_age_groups;
  shared->dim_p_recov_sympt = shared->n_age_groups;
  shared->dim_s_ij_1 = shared->n_age_groups;
  shared->dim_s_ij_2 = shared->n_age_groups;
  shared->dim_trans_increase_1 = shared->n_age_groups;
  shared->dim_trans_increase_2 = shared->n_trans_classes;
  shared->dim_trans_profile_1 = shared->n_age_groups;
  shared->dim_trans_profile_2 = shared->n_trans_classes;
  shared->dt = 1 / (real_type) shared->steps_per_day;
  shared->initial_beta_out = shared->beta_step[0];
  internal.delta_D = std::vector<real_type>(shared->dim_delta_D);
  internal.delta_R = std::vector<real_type>(shared->dim_delta_R);
  shared->initial_D = std::vector<real_type>(shared->dim_D);
  shared->initial_R = std::vector<real_type>(shared->dim_R);
  shared->initial_S = std::vector<real_type>(shared->dim_S);
  internal.lambda = std::vector<real_type>(shared->dim_lambda);
  internal.n_SE = std::vector<real_type>(shared->dim_n_SE);
  internal.new_D = std::vector<real_type>(shared->dim_new_D);
  internal.p_SE = std::vector<real_type>(shared->dim_p_SE);
  shared->dim_E = shared->dim_E_1 * shared->dim_E_2 * shared->dim_E_3;
  shared->dim_E_12 = shared->dim_E_1 * shared->dim_E_2;
  shared->dim_I_A = shared->dim_I_A_1 * shared->dim_I_A_2 * shared->dim_I_A_3;
  shared->dim_I_A_12 = shared->dim_I_A_1 * shared->dim_I_A_2;
  shared->dim_I_C = shared->dim_I_C_1 * shared->dim_I_C_2 * shared->dim_I_C_3;
  shared->dim_I_C_12 = shared->dim_I_C_1 * shared->dim_I_C_2;
  shared->dim_I_ICU = shared->dim_I_ICU_1 * shared->dim_I_ICU_2 * shared->dim_I_ICU_3;
  shared->dim_I_ICU_12 = shared->dim_I_ICU_1 * shared->dim_I_ICU_2;
  shared->dim_I_hosp = shared->dim_I_hosp_1 * shared->dim_I_hosp_2 * shared->dim_I_hosp_3;
  shared->dim_I_hosp_12 = shared->dim_I_hosp_1 * shared->dim_I_hosp_2;
  shared->dim_I_with_diff_trans = shared->dim_I_with_diff_trans_1 * shared->dim_I_with_diff_trans_2;
  shared->dim_R_hosp = shared->dim_R_hosp_1 * shared->dim_R_hosp_2 * shared->dim_R_hosp_3;
  shared->dim_R_hosp_12 = shared->dim_R_hosp_1 * shared->dim_R_hosp_2;
  shared->dim_aux_EE = shared->dim_aux_EE_1 * shared->dim_aux_EE_2 * shared->dim_aux_EE_3;
  shared->dim_aux_EE_12 = shared->dim_aux_EE_1 * shared->dim_aux_EE_2;
  shared->dim_aux_II_A = shared->dim_aux_II_A_1 * shared->dim_aux_II_A_2 * shared->dim_aux_II_A_3;
  shared->dim_aux_II_A_12 = shared->dim_aux_II_A_1 * shared->dim_aux_II_A_2;
  shared->dim_aux_II_C = shared->dim_aux_II_C_1 * shared->dim_aux_II_C_2 * shared->dim_aux_II_C_3;
  shared->dim_aux_II_C_12 = shared->dim_aux_II_C_1 * shared->dim_aux_II_C_2;
  shared->dim_aux_II_ICU = shared->dim_aux_II_ICU_1 * shared->dim_aux_II_ICU_2 * shared->dim_aux_II_ICU_3;
  shared->dim_aux_II_ICU_12 = shared->dim_aux_II_ICU_1 * shared->dim_aux_II_ICU_2;
  shared->dim_aux_II_hosp = shared->dim_aux_II_hosp_1 * shared->dim_aux_II_hosp_2 * shared->dim_aux_II_hosp_3;
  shared->dim_aux_II_hosp_12 = shared->dim_aux_II_hosp_1 * shared->dim_aux_II_hosp_2;
  shared->dim_aux_R_hosp = shared->dim_aux_R_hosp_1 * shared->dim_aux_R_hosp_2 * shared->dim_aux_R_hosp_3;
  shared->dim_aux_R_hosp_12 = shared->dim_aux_R_hosp_1 * shared->dim_aux_R_hosp_2;
  shared->dim_aux_p_bin = shared->dim_aux_p_bin_1 * shared->dim_aux_p_bin_2;
  shared->dim_delta_E = shared->dim_delta_E_1 * shared->dim_delta_E_2 * shared->dim_delta_E_3;
  shared->dim_delta_E_12 = shared->dim_delta_E_1 * shared->dim_delta_E_2;
  shared->dim_delta_I_A = shared->dim_delta_I_A_1 * shared->dim_delta_I_A_2 * shared->dim_delta_I_A_3;
  shared->dim_delta_I_A_12 = shared->dim_delta_I_A_1 * shared->dim_delta_I_A_2;
  shared->dim_delta_I_C = shared->dim_delta_I_C_1 * shared->dim_delta_I_C_2 * shared->dim_delta_I_C_3;
  shared->dim_delta_I_C_12 = shared->dim_delta_I_C_1 * shared->dim_delta_I_C_2;
  shared->dim_delta_I_ICU = shared->dim_delta_I_ICU_1 * shared->dim_delta_I_ICU_2 * shared->dim_delta_I_ICU_3;
  shared->dim_delta_I_ICU_12 = shared->dim_delta_I_ICU_1 * shared->dim_delta_I_ICU_2;
  shared->dim_delta_I_hosp = shared->dim_delta_I_hosp_1 * shared->dim_delta_I_hosp_2 * shared->dim_delta_I_hosp_3;
  shared->dim_delta_I_hosp_12 = shared->dim_delta_I_hosp_1 * shared->dim_delta_I_hosp_2;
  shared->dim_delta_R_hosp = shared->dim_delta_R_hosp_1 * shared->dim_delta_R_hosp_2 * shared->dim_delta_R_hosp_3;
  shared->dim_delta_R_hosp_12 = shared->dim_delta_R_hosp_1 * shared->dim_delta_R_hosp_2;
  shared->dim_m = shared->dim_m_1 * shared->dim_m_2;
  shared->dim_n_EE = shared->dim_n_EE_1 * shared->dim_n_EE_2 * shared->dim_n_EE_3;
  shared->dim_n_EE_12 = shared->dim_n_EE_1 * shared->dim_n_EE_2;
  shared->dim_n_EI_A = shared->dim_n_EI_A_1 * shared->dim_n_EI_A_2;
  shared->dim_n_EI_C = shared->dim_n_EI_C_1 * shared->dim_n_EI_C_2;
  shared->dim_n_ICU_to_R_hosp = shared->dim_n_ICU_to_R_hosp_1 * shared->dim_n_ICU_to_R_hosp_2;
  shared->dim_n_II_A = shared->dim_n_II_A_1 * shared->dim_n_II_A_2 * shared->dim_n_II_A_3;
  shared->dim_n_II_A_12 = shared->dim_n_II_A_1 * shared->dim_n_II_A_2;
  shared->dim_n_II_C = shared->dim_n_II_C_1 * shared->dim_n_II_C_2 * shared->dim_n_II_C_3;
  shared->dim_n_II_C_12 = shared->dim_n_II_C_1 * shared->dim_n_II_C_2;
  shared->dim_n_II_ICU = shared->dim_n_II_ICU_1 * shared->dim_n_II_ICU_2 * shared->dim_n_II_ICU_3;
  shared->dim_n_II_ICU_12 = shared->dim_n_II_ICU_1 * shared->dim_n_II_ICU_2;
  shared->dim_n_II_hosp = shared->dim_n_II_hosp_1 * shared->dim_n_II_hosp_2 * shared->dim_n_II_hosp_3;
  shared->dim_n_II_hosp_12 = shared->dim_n_II_hosp_1 * shared->dim_n_II_hosp_2;
  shared->dim_n_R_hosp = shared->dim_n_R_hosp_1 * shared->dim_n_R_hosp_2 * shared->dim_n_R_hosp_3;
  shared->dim_n_R_hosp_12 = shared->dim_n_R_hosp_1 * shared->dim_n_R_hosp_2;
  shared->dim_n_death_hosp = shared->dim_n_death_hosp_1 * shared->dim_n_death_hosp_2;
  shared->dim_n_hosp_to_ICU = shared->dim_n_hosp_to_ICU_1 * shared->dim_n_hosp_to_ICU_2;
  shared->dim_n_sympt_to_hosp = shared->dim_n_sympt_to_hosp_1 * shared->dim_n_sympt_to_hosp_2;
  shared->dim_new_I_ICU = shared->dim_new_I_ICU_1 * shared->dim_new_I_ICU_2 * shared->dim_new_I_ICU_3;
  shared->dim_new_I_ICU_12 = shared->dim_new_I_ICU_1 * shared->dim_new_I_ICU_2;
  shared->dim_s_ij = shared->dim_s_ij_1 * shared->dim_s_ij_2;
  shared->dim_trans_increase = shared->dim_trans_increase_1 * shared->dim_trans_increase_2;
  shared->dim_trans_profile = shared->dim_trans_profile_1 * shared->dim_trans_profile_2;
  for (int i = 1; i <= shared->dim_D; ++i) {
    shared->initial_D[i - 1] = 0;
  }
  for (int i = 1; i <= shared->dim_R; ++i) {
    shared->initial_R[i - 1] = 0;
  }
  for (int i = 1; i <= shared->dim_S; ++i) {
    shared->initial_S[i - 1] = 0;
  }
  shared->offset_variable_D = shared->dim_R + shared->dim_S + 6;
  shared->offset_variable_E = shared->dim_D + shared->dim_R + shared->dim_S + 6;
  shared->offset_variable_R = shared->dim_S + 6;
  shared->p_C = user_get_array_fixed<real_type, 1>(user, "p_C", shared->p_C, {shared->dim_p_C}, NA_REAL, NA_REAL);
  shared->p_EE = 1 - std::exp(- shared->gamma_E * shared->dt);
  shared->p_II_A = 1 - std::exp(- shared->gamma_A * shared->dt);
  shared->p_II_C = 1 - std::exp(- shared->gamma_C * shared->dt);
  shared->p_II_ICU = 1 - std::exp(- shared->gamma_ICU * shared->dt);
  shared->p_II_hosp = 1 - std::exp(- shared->gamma_hosp * shared->dt);
  shared->p_R_hosp = 1 - std::exp(- shared->gamma_rec * shared->dt);
  shared->p_death_hosp = user_get_array_fixed<real_type, 1>(user, "p_death_hosp", shared->p_death_hosp, {shared->dim_p_death_hosp}, NA_REAL, NA_REAL);
  shared->p_recov_ICU = user_get_array_fixed<real_type, 1>(user, "p_recov_ICU", shared->p_recov_ICU, {shared->dim_p_recov_ICU}, NA_REAL, NA_REAL);
  shared->p_recov_hosp = user_get_array_fixed<real_type, 1>(user, "p_recov_hosp", shared->p_recov_hosp, {shared->dim_p_recov_hosp}, NA_REAL, NA_REAL);
  shared->p_recov_sympt = user_get_array_fixed<real_type, 1>(user, "p_recov_sympt", shared->p_recov_sympt, {shared->dim_p_recov_sympt}, NA_REAL, NA_REAL);
  shared->seed_step_end = shared->seed_step_start + shared->dim_seed_value;
  internal.I_with_diff_trans = std::vector<real_type>(shared->dim_I_with_diff_trans);
  internal.aux_EE = std::vector<real_type>(shared->dim_aux_EE);
  internal.aux_II_A = std::vector<real_type>(shared->dim_aux_II_A);
  internal.aux_II_C = std::vector<real_type>(shared->dim_aux_II_C);
  internal.aux_II_ICU = std::vector<real_type>(shared->dim_aux_II_ICU);
  internal.aux_II_hosp = std::vector<real_type>(shared->dim_aux_II_hosp);
  internal.aux_R_hosp = std::vector<real_type>(shared->dim_aux_R_hosp);
  shared->aux_p_bin = std::vector<real_type>(shared->dim_aux_p_bin);
  internal.delta_E = std::vector<real_type>(shared->dim_delta_E);
  internal.delta_I_A = std::vector<real_type>(shared->dim_delta_I_A);
  internal.delta_I_C = std::vector<real_type>(shared->dim_delta_I_C);
  internal.delta_I_ICU = std::vector<real_type>(shared->dim_delta_I_ICU);
  internal.delta_I_hosp = std::vector<real_type>(shared->dim_delta_I_hosp);
  internal.delta_R_hosp = std::vector<real_type>(shared->dim_delta_R_hosp);
  shared->initial_E = std::vector<real_type>(shared->dim_E);
  shared->initial_I_A = std::vector<real_type>(shared->dim_I_A);
  shared->initial_I_C = std::vector<real_type>(shared->dim_I_C);
  shared->initial_I_ICU = std::vector<real_type>(shared->dim_I_ICU);
  shared->initial_I_hosp = std::vector<real_type>(shared->dim_I_hosp);
  shared->initial_R_hosp = std::vector<real_type>(shared->dim_R_hosp);
  internal.n_EE = std::vector<real_type>(shared->dim_n_EE);
  internal.n_EI_A = std::vector<real_type>(shared->dim_n_EI_A);
  internal.n_EI_C = std::vector<real_type>(shared->dim_n_EI_C);
  internal.n_ICU_to_R_hosp = std::vector<real_type>(shared->dim_n_ICU_to_R_hosp);
  internal.n_II_A = std::vector<real_type>(shared->dim_n_II_A);
  internal.n_II_C = std::vector<real_type>(shared->dim_n_II_C);
  internal.n_II_ICU = std::vector<real_type>(shared->dim_n_II_ICU);
  internal.n_II_hosp = std::vector<real_type>(shared->dim_n_II_hosp);
  internal.n_R_hosp = std::vector<real_type>(shared->dim_n_R_hosp);
  internal.n_death_hosp = std::vector<real_type>(shared->dim_n_death_hosp);
  internal.n_hosp_to_ICU = std::vector<real_type>(shared->dim_n_hosp_to_ICU);
  internal.n_sympt_to_hosp = std::vector<real_type>(shared->dim_n_sympt_to_hosp);
  internal.new_I_ICU = std::vector<real_type>(shared->dim_new_I_ICU);
  internal.s_ij = std::vector<real_type>(shared->dim_s_ij);
  shared->trans_increase = std::vector<real_type>(shared->dim_trans_increase);
  shared->trans_profile = std::vector<real_type>(shared->dim_trans_profile);
  for (int i = 1; i <= shared->dim_E_1; ++i) {
    for (int j = 1; j <= shared->dim_E_2; ++j) {
      for (int k = 1; k <= shared->dim_E_3; ++k) {
        shared->initial_E[i - 1 + shared->dim_E_1 * (j - 1) + shared->dim_E_12 * (k - 1)] = 0;
      }
    }
  }
  for (int i = 1; i <= shared->dim_I_A_1; ++i) {
    for (int j = 1; j <= shared->dim_I_A_2; ++j) {
      for (int k = 1; k <= shared->dim_I_A_3; ++k) {
        shared->initial_I_A[i - 1 + shared->dim_I_A_1 * (j - 1) + shared->dim_I_A_12 * (k - 1)] = 0;
      }
    }
  }
  for (int i = 1; i <= shared->dim_I_C_1; ++i) {
    for (int j = 1; j <= shared->dim_I_C_2; ++j) {
      for (int k = 1; k <= shared->dim_I_C_3; ++k) {
        shared->initial_I_C[i - 1 + shared->dim_I_C_1 * (j - 1) + shared->dim_I_C_12 * (k - 1)] = 0;
      }
    }
  }
  for (int i = 1; i <= shared->dim_I_ICU_1; ++i) {
    for (int j = 1; j <= shared->dim_I_ICU_2; ++j) {
      for (int k = 1; k <= shared->dim_I_ICU_3; ++k) {
        shared->initial_I_ICU[i - 1 + shared->dim_I_ICU_1 * (j - 1) + shared->dim_I_ICU_12 * (k - 1)] = 0;
      }
    }
  }
  for (int i = 1; i <= shared->dim_I_hosp_1; ++i) {
    for (int j = 1; j <= shared->dim_I_hosp_2; ++j) {
      for (int k = 1; k <= shared->dim_I_hosp_3; ++k) {
        shared->initial_I_hosp[i - 1 + shared->dim_I_hosp_1 * (j - 1) + shared->dim_I_hosp_12 * (k - 1)] = 0;
      }
    }
  }
  for (int i = 1; i <= shared->dim_R_hosp_1; ++i) {
    for (int j = 1; j <= shared->dim_R_hosp_2; ++j) {
      for (int k = 1; k <= shared->dim_R_hosp_3; ++k) {
        shared->initial_R_hosp[i - 1 + shared->dim_R_hosp_1 * (j - 1) + shared->dim_R_hosp_12 * (k - 1)] = 0;
      }
    }
  }
  shared->m = user_get_array_fixed<real_type, 2>(user, "m", shared->m, {shared->dim_m_1, shared->dim_m_2}, NA_REAL, NA_REAL);
  shared->offset_variable_I_A = shared->dim_D + shared->dim_E + shared->dim_R + shared->dim_S + 6;
  shared->offset_variable_I_C = shared->dim_D + shared->dim_E + shared->dim_I_A + shared->dim_R + shared->dim_S + 6;
  shared->offset_variable_I_ICU = shared->dim_D + shared->dim_E + shared->dim_I_A + shared->dim_I_C + shared->dim_I_hosp + shared->dim_R + shared->dim_S + 6;
  shared->offset_variable_I_hosp = shared->dim_D + shared->dim_E + shared->dim_I_A + shared->dim_I_C + shared->dim_R + shared->dim_S + 6;
  shared->offset_variable_R_hosp = shared->dim_D + shared->dim_E + shared->dim_I_A + shared->dim_I_C + shared->dim_I_ICU + shared->dim_I_hosp + shared->dim_R + shared->dim_S + 6;
  for (int i = 1; i <= shared->dim_trans_increase_1; ++i) {
    for (int j = 1; j <= shared->dim_trans_increase_2; ++j) {
      shared->trans_increase[i - 1 + shared->dim_trans_increase_1 * (j - 1)] = 1;
    }
  }
  for (int i = 1; i <= shared->dim_trans_profile_1; ++i) {
    for (int j = 1; j <= shared->dim_trans_profile_2; ++j) {
      shared->trans_profile[i - 1 + shared->dim_trans_profile_1 * (j - 1)] = 1;
    }
  }
  for (int i = 1; i <= shared->dim_aux_p_bin_1; ++i) {
    int j = 1;
    shared->aux_p_bin[i - 1 + shared->dim_aux_p_bin_1 * (j - 1)] = shared->trans_profile[shared->dim_trans_profile_1 * 0 + i - 1];
  }
  for (int i = 1; i <= shared->dim_aux_p_bin_1; ++i) {
    for (int j = 2; j <= (shared->n_trans_classes - 1); ++j) {
      shared->aux_p_bin[i - 1 + shared->dim_aux_p_bin_1 * (j - 1)] = shared->trans_profile[shared->dim_trans_profile_1 * (j - 1) + i - 1] / (real_type) odin_sum2<real_type>(shared->trans_profile.data(), i - 1, i, j - 1, shared->n_trans_classes, shared->dim_trans_profile_1);
    }
  }
  return dust::pars_type<basic>(shared, internal);
}
template <>
cpp11::sexp dust_info<basic>(const dust::pars_type<basic>& pars) {
  const basic::internal_type internal = pars.internal;
  const std::shared_ptr<const basic::shared_type> shared = pars.shared;
  cpp11::writable::strings nms({"time", "N_tot", "I_ICU_tot", "D_tot", "D_inc", "beta_out", "S", "R", "D", "E", "I_A", "I_C", "I_hosp", "I_ICU", "R_hosp"});
  cpp11::writable::list dim(15);
  dim[0] = cpp11::writable::integers({1});
  dim[1] = cpp11::writable::integers({1});
  dim[2] = cpp11::writable::integers({1});
  dim[3] = cpp11::writable::integers({1});
  dim[4] = cpp11::writable::integers({1});
  dim[5] = cpp11::writable::integers({1});
  dim[6] = cpp11::writable::integers({shared->dim_S});
  dim[7] = cpp11::writable::integers({shared->dim_R});
  dim[8] = cpp11::writable::integers({shared->dim_D});
  dim[9] = cpp11::writable::integers({shared->dim_E_1, shared->dim_E_2, shared->dim_E_3});
  dim[10] = cpp11::writable::integers({shared->dim_I_A_1, shared->dim_I_A_2, shared->dim_I_A_3});
  dim[11] = cpp11::writable::integers({shared->dim_I_C_1, shared->dim_I_C_2, shared->dim_I_C_3});
  dim[12] = cpp11::writable::integers({shared->dim_I_hosp_1, shared->dim_I_hosp_2, shared->dim_I_hosp_3});
  dim[13] = cpp11::writable::integers({shared->dim_I_ICU_1, shared->dim_I_ICU_2, shared->dim_I_ICU_3});
  dim[14] = cpp11::writable::integers({shared->dim_R_hosp_1, shared->dim_R_hosp_2, shared->dim_R_hosp_3});
  dim.names() = nms;
  cpp11::writable::list index(15);
  index[0] = cpp11::writable::integers({1});
  index[1] = cpp11::writable::integers({2});
  index[2] = cpp11::writable::integers({3});
  index[3] = cpp11::writable::integers({4});
  index[4] = cpp11::writable::integers({5});
  index[5] = cpp11::writable::integers({6});
  index[6] = integer_sequence(7, shared->dim_S);
  index[7] = integer_sequence(shared->offset_variable_R + 1, shared->dim_R);
  index[8] = integer_sequence(shared->offset_variable_D + 1, shared->dim_D);
  index[9] = integer_sequence(shared->offset_variable_E + 1, shared->dim_E);
  index[10] = integer_sequence(shared->offset_variable_I_A + 1, shared->dim_I_A);
  index[11] = integer_sequence(shared->offset_variable_I_C + 1, shared->dim_I_C);
  index[12] = integer_sequence(shared->offset_variable_I_hosp + 1, shared->dim_I_hosp);
  index[13] = integer_sequence(shared->offset_variable_I_ICU + 1, shared->dim_I_ICU);
  index[14] = integer_sequence(shared->offset_variable_R_hosp + 1, shared->dim_R_hosp);
  index.names() = nms;
  size_t len = shared->offset_variable_R_hosp + shared->dim_R_hosp;
  using namespace cpp11::literals;
  return cpp11::writable::list({
           "dim"_nm = dim,
           "len"_nm = len,
           "index"_nm = index});
}
template <>
basic::data_type dust_data<basic>(cpp11::list data) {
  using real_type = basic::real_type;
  return basic::data_type{
      cpp11::as_cpp<real_type>(data["icu"]),
      cpp11::as_cpp<real_type>(data["deaths"])
    };
}
}

cpp11::sexp dust_basic_capabilities() {
  return dust::r::dust_capabilities<basic>();
}

cpp11::sexp dust_basic_gpu_info() {
  return dust::gpu::r::gpu_info();
}
using model_cpu = dust::dust_cpu<basic>;

SEXP dust_cpu_basic_alloc(cpp11::list r_pars, bool pars_multi, size_t step,
                             cpp11::sexp r_n_particles, size_t n_threads,
                             cpp11::sexp r_seed, bool deterministic,
                             cpp11::sexp gpu_config) {
  return dust::r::dust_cpu_alloc<basic>(r_pars, pars_multi, step, r_n_particles,
                                        n_threads, r_seed, deterministic,
                                        gpu_config);
}

SEXP dust_cpu_basic_run(SEXP ptr, size_t step_end) {
  return dust::r::dust_run<model_cpu>(ptr, step_end);
}

SEXP dust_cpu_basic_simulate(SEXP ptr, cpp11::sexp step_end) {
  return dust::r::dust_simulate<model_cpu>(ptr, step_end);
}

SEXP dust_cpu_basic_set_index(SEXP ptr, cpp11::sexp r_index) {
  dust::r::dust_set_index<model_cpu>(ptr, r_index);
  return R_NilValue;
}

SEXP dust_cpu_basic_update_state(SEXP ptr, SEXP r_pars, SEXP r_state,
                                SEXP r_step, SEXP r_set_initial_state) {
  return dust::r::dust_update_state<model_cpu>(ptr, r_pars, r_state, r_step,
                                               r_set_initial_state);
}

SEXP dust_cpu_basic_state(SEXP ptr, SEXP r_index) {
  return dust::r::dust_state<model_cpu>(ptr, r_index);
}

size_t dust_cpu_basic_step(SEXP ptr) {
  return dust::r::dust_step<model_cpu>(ptr);
}

void dust_cpu_basic_reorder(SEXP ptr, cpp11::sexp r_index) {
  return dust::r::dust_reorder<model_cpu>(ptr, r_index);
}

SEXP dust_cpu_basic_resample(SEXP ptr, cpp11::doubles r_weights) {
  return dust::r::dust_resample<model_cpu>(ptr, r_weights);
}

SEXP dust_cpu_basic_rng_state(SEXP ptr, bool first_only, bool last_only) {
  return dust::r::dust_rng_state<model_cpu>(ptr, first_only, last_only);
}

SEXP dust_cpu_basic_set_rng_state(SEXP ptr, cpp11::raws rng_state) {
  dust::r::dust_set_rng_state<model_cpu>(ptr, rng_state);
  return R_NilValue;
}

SEXP dust_cpu_basic_set_data(SEXP ptr, cpp11::list data) {
  dust::r::dust_set_data<model_cpu>(ptr, data);
  return R_NilValue;
}

SEXP dust_cpu_basic_compare_data(SEXP ptr) {
  return dust::r::dust_compare_data<model_cpu>(ptr);
}

SEXP dust_cpu_basic_filter(SEXP ptr, bool save_trajectories,
                          cpp11::sexp step_snapshot) {
  return dust::r::dust_filter<model_cpu>(ptr, save_trajectories, step_snapshot);
}

void dust_cpu_basic_set_n_threads(SEXP ptr, int n_threads) {
  return dust::r::dust_set_n_threads<model_cpu>(ptr, n_threads);
}

int dust_cpu_basic_n_state(SEXP ptr) {
  return dust::r::dust_n_state<model_cpu>(ptr);
}
